Gotoï¼š
Goto(I0,declaration) = Closure( [267, 273, 274, 287] ) = {273, 274, 267, 287} ={ external_declaration->declaration,float external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,# } = I1
Goto(I0,start) = Closure( [59] ) = {59} ={ sstart->start,# } = I2
Goto(I0,external_declaration) = Closure( [135] ) = {387, 388, 325, 135, 2951, 401, 211, 3027, 5397, 5403, 5404, 97, 229, 5417, 235, 236, 305, 311, 312, 249, 2875, 381} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->function_definition,# start->external_declarationstart,# type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# start->,# type_specifier->void,identifier function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int start->external_declarationstart,# external_declaration->declaration,void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# external_declaration->declaration,float external_declaration->declaration,int external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,int external_declaration->declaration,# type_specifier->int,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I3
Goto(I0,function_definition) = Closure( [343, 349, 350, 363] ) = {363, 349, 350, 343} ={ external_declaration->function_definition,# external_declaration->function_definition,float external_declaration->function_definition,int external_declaration->function_definition,void } = I4
Goto(I0,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I0,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I0,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I0,type_specifier) = Closure( [425, 426, 439, 5435, 5441, 5442, 5455, 419] ) = {5441, 5442, 419, 581, 585, 426, 425, 5455, 439, 5435} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void } = I8



Goto(I3,declaration) = Closure( [267, 273, 274, 287] ) = {273, 274, 267, 287} ={ external_declaration->declaration,float external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,# } = I1
Goto(I3,start) = Closure( [173] ) = {173} ={ start->external_declarationstart,# } = I9
Goto(I3,external_declaration) = Closure( [135] ) = {387, 388, 325, 135, 2951, 401, 211, 3027, 5397, 5403, 5404, 97, 229, 5417, 235, 236, 305, 311, 312, 249, 2875, 381} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->function_definition,# start->external_declarationstart,# type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# start->,# type_specifier->void,identifier function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int start->external_declarationstart,# external_declaration->declaration,void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# external_declaration->declaration,float external_declaration->declaration,int external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,int external_declaration->declaration,# type_specifier->int,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I3
Goto(I3,function_definition) = Closure( [363, 343, 349, 350] ) = {363, 349, 350, 343} ={ external_declaration->function_definition,# external_declaration->function_definition,float external_declaration->function_definition,int external_declaration->function_definition,void } = I4
Goto(I3,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I3,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I3,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I3,type_specifier) = Closure( [425, 426, 439, 5435, 5441, 5442, 5455, 419] ) = {5441, 5442, 419, 581, 585, 426, 425, 5455, 439, 5435} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void } = I8





Goto(I8,declaration_parameter) = Closure( [457, 464, 463, 477] ) = {464, 1075, 885, 457, 477, 463} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration_parameter_suffix->,; declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float } = I10
Goto(I8,identifier) = Closure( [5479, 5480, 619, 623, 5493, 5473] ) = {5473, 5732, 5479, 5480, 619, 1133, 623, 5493, 1113, 1117} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void M_function_definition->,( function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; M_declaration_parameter->,= declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# M_declaration_parameter->,; M_declaration_parameter->,, } = I11


Goto(I10,,) = Closure( [923] ) = {923, 1165} ={ declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; M_declaration_parameter_suffix->,identifier } = I12
Goto(I10,declaration_parameter_suffix) = Closure( [502, 495, 515, 501] ) = {515, 501, 502, 495} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I13

Goto(I11,M_declaration_parameter) = Closure( [657, 661] ) = {657, 737, 851, 661, 733, 847} ={ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration_parameter_assign->=expression,, declaration_parameter_assign->,, declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration_parameter_assign->=expression,; declaration_parameter_assign->,; } = I14
Goto(I11,M_function_definition) = Closure( [5511, 5517, 5518, 5531] ) = {5531, 5517, 5518, 5511} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void } = I15

Goto(I12,M_declaration_parameter_suffix) = Closure( [961] ) = {585, 961, 581} ={ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; } = I16

Goto(I13,;) = Closure( [553, 539, 540, 533] ) = {553, 539, 540, 533} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I17

Goto(I14,declaration_parameter_assign) = Closure( [695, 699] ) = {699, 695} ={ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; } = I18
Goto(I14,=) = Closure( [775, 771] ) = {4100, 4102, 4103, 3089, 3093, 3615, 1569, 1573, 3621, 3625, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 3165, 3169, 1645, 1649, 3190, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4419, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1269, 1270, 1271, 3317, 3321, 1276, 1277, 1278, 3843, 1283, 771, 775, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3342, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 1347, 3393, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 3418, 4444, 4445, 3995, 4001, 4004, 4005, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 1497, 3545, 3549, 3558, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->primary_expression,; third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,; or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; expression->function_expression,, and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,, and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I19

Goto(I15,() = Closure( [5569, 5555, 5556, 5549] ) = {5569, 5765, 2951, 3027, 6233, 5917, 6247, 5549, 6259, 5555, 5556, 5879, 2875} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# function_parameter_list->function_parameterfunction_parameter_list_suffix,) type_specifier->float,identifier type_specifier->void,identifier function_parameter->type_specifieridentifier,void function_parameter_list->void,) function_parameter->type_specifieridentifier,, function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void function_parameter->type_specifieridentifier,) function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int function_parameter_list->,) type_specifier->int,identifier } = I20

Goto(I16,declaration_parameter) = Closure( [999] ) = {1075, 885, 999} ={ declaration_parameter_suffix->,; declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; } = I21
Goto(I16,identifier) = Closure( [623, 619] ) = {1117, 1113, 619, 1133, 623} ={ M_declaration_parameter->,, M_declaration_parameter->,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; M_declaration_parameter->,= declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, } = I22



Goto(I19,number) = Closure( [1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I19,or_bool_expression) = Closure( [3127, 3131, 3203, 3207, 3228] ) = {3203, 4516, 4484, 4487, 3207, 3127, 3131, 3228, 4509} ={ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_operator->||,( or_operator->||,number or_operator->||,! or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, constant_expression->or_bool_expression,; constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I24
Goto(I19,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I19,function_expression) = Closure( [1531, 1535] ) = {1531, 1535} ={ expression->function_expression,; expression->function_expression,, } = I26
Goto(I19,primary_expression) = Closure( [4457, 4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I19,single_bool_expression) = Closure( [3653, 3659, 3663, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3587, 3596, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I28
Goto(I19,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1271, 1258, 1259, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,< primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I19,and_bool_expression) = Closure( [3355, 3359, 3380, 3431, 3435, 3444, 3456] ) = {3456, 3431, 4585, 3435, 4560, 4592, 4563, 3380, 3444, 3355, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_operator->&&,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& or_bool_expression->and_bool_expression,; or_bool_expression->and_bool_expression,, } = I30
Goto(I19,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4108, 4109, 4115, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 4033, 4039, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I31
Goto(I19,expression) = Closure( [809, 813] ) = {809, 813} ={ declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, } = I32
Goto(I19,first_expression) = Closure( [3805, 3811, 3815, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {5124, 3881, 3887, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I33
Goto(I19,identifier) = Closure( [1683, 1687, 1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1683, 1238, 1687, 1240, 1239, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< function_expression->identifier(expression_list),; primary_expression->identifier,* function_expression->identifier(expression_list),, primary_expression->identifier,&& primary_expression->identifier,> primary_expression->identifier,== } = I34
Goto(I19,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35
Goto(I19,constant_expression) = Closure( [1607, 1611] ) = {1611, 1607} ={ expression->constant_expression,, expression->constant_expression,; } = I36

Goto(I20,function_parameter_list) = Closure( [5607, 5587, 5593, 5594] ) = {5593, 5594, 5587, 5607} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# } = I37
Goto(I20,void) = Closure( [3065, 5955] ) = {3065, 5955} ={ type_specifier->void,identifier function_parameter_list->void,) } = I38
Goto(I20,function_parameter) = Closure( [5803] ) = {5993, 6145, 5803, 6183} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->,) function_parameter_list->function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->void,) } = I39
Goto(I20,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I20,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I20,type_specifier) = Closure( [6271, 6285, 6297] ) = {6297, 6285, 6271} ={ function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,void } = I40

Goto(I21,,) = Closure( [923] ) = {923, 1165} ={ declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; M_declaration_parameter_suffix->,identifier } = I12
Goto(I21,declaration_parameter_suffix) = Closure( [1037] ) = {1037} ={ declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; } = I41

Goto(I22,M_declaration_parameter) = Closure( [657, 661] ) = {657, 737, 851, 661, 733, 847} ={ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration_parameter_assign->=expression,, declaration_parameter_assign->,, declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration_parameter_assign->=expression,; declaration_parameter_assign->,; } = I14


Goto(I24,or_operator) = Closure( [3241, 3245, 3266] ) = {4100, 4102, 4103, 3615, 3621, 3625, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 3241, 1194, 1195, 1193, 3245, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3777, 3266, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 1345, 4422, 3397, 1352, 4424, 4425, 1353, 1354, 4423, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 3418, 4444, 4445, 3995, 4001, 4004, 4005, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 3545, 3549, 3558, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; primary_expression->(expression),, third_expression->primary_expression,+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,, and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I42
Goto(I24,||) = Closure( [4554, 4522, 4525, 4547] ) = {4522, 4554, 4547, 4525} ={ or_operator->||,number or_operator->||,( or_operator->||,identifier or_operator->||,! } = I43




Goto(I28,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I28,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I28,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I28,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I28,bool_operator) = Closure( [3691, 3697, 3701, 3703, 3709, 3710, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3697, 3701, 3703, 3709, 4222, 4223, 3710, 3715, 4229, 4232, 4233, 4234, 4235, 3720, 3722, 3723, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4330, 4331, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 4419, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 4432, 1359, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4001, 4004, 4005, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I48
Goto(I28,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I28,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50

Goto(I29,number) = Closure( [1321, 1326, 1328, 1329, 1309, 1296, 1297, 1303, 1306, 1307, 1308, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I29,primary_expression) = Closure( [4392, 4393, 4394, 4399, 4404, 4406, 4407, 4374, 4375, 4381, 4386, 4387, 4384, 4385] ) = {4384, 4385, 4386, 4387, 4392, 4393, 4394, 4399, 4404, 4406, 4407, 4374, 4375, 4381} ={ third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; } = I51
Goto(I29,identifier) = Closure( [1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I29,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35

Goto(I30,and_operator) = Closure( [3494, 3469, 3473, 3482] ) = {4100, 4102, 4103, 3615, 3621, 3625, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4309, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 1347, 4419, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3469, 3473, 3482, 3995, 4001, 4004, 4005, 3494, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,, third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I53
Goto(I30,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I31,second_operator) = Closure( [4146, 4147, 4153, 4156, 4157, 4158, 4159, 4164, 4165, 4166, 4171, 4176, 4178, 4179] ) = {1283, 1288, 1290, 1291, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1334, 1335, 1207, 4153, 4156, 4157, 1341, 4158, 1344, 1345, 1346, 1347, 4164, 4165, 4159, 4166, 1352, 1353, 1354, 4171, 1359, 4176, 1212, 4178, 1364, 4179, 1366, 1367, 1214, 1215, 1258, 1259, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, primary_expression->(expression),; second_expression->second_expressionsecond_operatorprimary_expression,- primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,|| primary_expression->(expression),>= second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I55
Goto(I31,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I31,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57


Goto(I33,first_operator) = Closure( [3919, 3925, 3928, 3929, 3930, 3931, 3937, 3938, 3943, 3948, 3950, 3951] ) = {1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 4419, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 3919, 4431, 4432, 1359, 1364, 3925, 4437, 1366, 3928, 3929, 3930, 3931, 4442, 4444, 1367, 4445, 3937, 3938, 3943, 3948, 3950, 3951, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4323, 4070, 4071, 4328, 1258, 1259, 4330, 4077, 4331, 4080, 1265, 4081, 4082, 1268, 1269, 1270, 4083, 4088, 4089, 4090, 1271, 1276, 1277, 1278, 4095} ={ primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= first_expression->first_expressionfirst_operatorsecond_expression,; third_expression->primary_expression,== primary_expression->(expression),|| first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< third_expression->primary_expression,>= third_expression->primary_expression,|| primary_expression->(expression),<= third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,; third_expression->!primary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->number,; second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- primary_expression->number,+ primary_expression->number,, primary_expression->number,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I58
Goto(I33,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I33,-) = Closure( [5206, 5209, 5231, 5238] ) = {5209, 5238, 5206, 5231} ={ first_operator->-,! first_operator->-,( first_operator->-,number first_operator->-,identifier } = I60

Goto(I34,() = Closure( [1721, 1725] ) = {4100, 4102, 4103, 3093, 3105, 3169, 3181, 3190, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 1283, 3333, 1288, 1290, 1291, 3342, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 1497, 3549, 1509, 3558, 3561, 3570, 3615, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 1649, 1661, 3767, 1721, 1725, 3777, 3779, 3785, 3786, 3789, 3791, 3796, 3798, 3799, 3843, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1851, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 1965, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= or_bool_expression->and_bool_expression,|| primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) and_bool_expression->single_bool_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) single_bool_expression->first_expression,!= function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| single_bool_expression->first_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= expression_list->expressionexpression_list_suffix,) first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& expression_list->,) first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I61

Goto(I35,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I35,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I35,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I35,function_expression) = Closure( [1547] ) = {1547} ={ expression->function_expression,) } = I65
Goto(I35,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4483, 4482] ) = {4480, 4450, 4451, 4483, 4482, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,<= third_expression->primary_expression,|| third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I35,single_bool_expression) = Closure( [3653, 3665, 3672, 3671, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I35,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I35,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I35,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I35,expression) = Closure( [1410, 1411, 1417, 1420, 1421, 1422, 1423, 1428, 1429, 1430, 1435, 1440, 1442, 1443] ) = {1440, 1410, 1411, 1442, 1443, 1417, 1420, 1421, 1422, 1423, 1428, 1429, 1430, 1435} ={ primary_expression->(expression),>= primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== } = I71
Goto(I35,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I35,identifier) = Closure( [1699, 1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I73
Goto(I35,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I35,constant_expression) = Closure( [1623] ) = {1623} ={ expression->constant_expression,) } = I75


Goto(I37,)) = Closure( [5631, 5632, 5625, 5645] ) = {5632, 6353, 6354, 6367, 5625, 6347, 5645, 5631} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void compound_statement->{statement_list},void function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float } = I76


Goto(I39,function_parameter_list_suffix) = Closure( [5841] ) = {5841} ={ function_parameter_list->function_parameterfunction_parameter_list_suffix,) } = I77
Goto(I39,void) = Closure( [6221] ) = {6221} ={ function_parameter_list_suffix->void,) } = I78
Goto(I39,,) = Closure( [6031] ) = {3027, 6259, 2951, 6233, 6247, 2875, 6031} ={ type_specifier->void,identifier function_parameter->type_specifieridentifier,) type_specifier->float,identifier function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,, type_specifier->int,identifier function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) } = I79

Goto(I40,identifier) = Closure( [6335, 6323, 6309] ) = {6323, 6309, 6335} ={ function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,) } = I80


Goto(I42,number) = Closure( [1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I42,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I42,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4461, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I42,single_bool_expression) = Closure( [3653, 3659, 3663, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3587, 3596, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I28
Goto(I42,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1271, 1258, 1259, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,< primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I42,and_bool_expression) = Closure( [3279, 3283, 3304, 3431, 3435, 3444, 3456] ) = {3456, 3431, 3304, 4585, 3435, 3279, 4560, 4592, 3283, 4563, 3444} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| and_operator->&&,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; and_operator->&&,number and_operator->&&,( or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, and_operator->&&,! and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& } = I81
Goto(I42,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4108, 4109, 4115, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 4033, 4039, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I31
Goto(I42,first_expression) = Closure( [3805, 3811, 3815, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {5124, 3881, 3887, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I33
Goto(I42,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1231, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I42,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1383, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35






Goto(I48,number) = Closure( [1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I48,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I48,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I48,!) = Closure( [4336, 4337, 4343, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4368, 4369] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4347, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,, third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I48,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4108, 4109, 4115, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 4033, 4039, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I31
Goto(I48,first_expression) = Closure( [3729, 3735, 3739, 3741, 3747, 3748, 3753, 3758, 3760, 3761, 3881, 3887, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {5124, 3729, 3735, 3739, 3741, 3747, 3748, 3753, 3881, 3758, 3887, 3760, 3761, 5168, 5171, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 5193, 3913, 5200, 5092, 5095, 5117} ={ first_operator->+,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= first_operator->-,number first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( first_operator->+,number first_operator->+,! first_operator->+,identifier } = I82
Goto(I48,identifier) = Closure( [1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I48,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35





Goto(I53,number) = Closure( [1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I53,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I53,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I53,single_bool_expression) = Closure( [3653, 3659, 3663, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3507, 3511, 3520, 3532] ) = {4864, 4737, 4867, 4744, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 3507, 4788, 4661, 4791, 5048, 3511, 4668, 3520, 3653, 3659, 4940, 4813, 3532, 4943, 3663, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, bool_operator-><,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I83
Goto(I53,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1271, 1258, 1259, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,< primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I53,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4108, 4109, 4115, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 4033, 4039, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I31
Goto(I53,first_expression) = Closure( [3805, 3811, 3815, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {5124, 3881, 3887, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I33
Goto(I53,identifier) = Closure( [1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I53,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35


Goto(I55,number) = Closure( [1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I55,primary_expression) = Closure( [4184, 4185, 4191, 4194, 4195, 4196, 4202, 4203, 4197, 4204, 4209, 4214, 4216, 4217] ) = {4217, 4194, 4195, 4196, 4197, 4202, 4203, 4204, 4209, 4214, 4184, 4185, 4216, 4191} ={ second_expression->second_expressionsecond_operatorprimary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,; } = I84
Goto(I55,identifier) = Closure( [1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I55,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35



Goto(I58,number) = Closure( [1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I58,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I58,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I58,!) = Closure( [4336, 4337, 4343, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4368, 4369] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4347, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,, third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I58,second_expression) = Closure( [4138, 4140, 4141, 3957, 3963, 3966, 3967, 3968, 3969, 3975, 3976, 3981, 3986, 3988, 3989, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {3968, 3969, 3975, 3976, 4108, 3981, 4109, 3986, 4115, 3988, 5269, 3989, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 5320, 5345, 5352, 3957, 3963, 5244, 3966, 3967} ={ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ first_expression->first_expressionfirst_operatorsecond_expression,== second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,; first_expression->first_expressionfirst_operatorsecond_expression,|| second_operator->*,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->/,number second_operator->/,identifier second_operator->/,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; second_operator->*,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, } = I85
Goto(I58,identifier) = Closure( [1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I52
Goto(I58,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35



Goto(I61,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I61,or_bool_expression) = Closure( [3131, 3143, 3207, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3207, 3219, 3131, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I87
Goto(I61,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I61,function_expression) = Closure( [1535, 1547] ) = {1547, 1535} ={ expression->function_expression,) expression->function_expression,, } = I89
Goto(I61,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I61,expression_list) = Closure( [1759, 1763] ) = {1763, 1759} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),; } = I91
Goto(I61,single_bool_expression) = Closure( [3587, 3596, 3599, 3608, 3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685] ) = {4864, 4737, 3587, 4867, 4744, 3596, 3599, 3608, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier and_bool_expression->single_bool_expression,, bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) and_bool_expression->single_bool_expression,|| bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I61,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I61,and_bool_expression) = Closure( [3359, 3371, 3380, 3435, 3444, 3447, 3456] ) = {3456, 4585, 3371, 3435, 4560, 4592, 4563, 3380, 3444, 3447, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->and_bool_expression,, } = I94
Goto(I61,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I61,expression) = Closure( [1889] ) = {1889, 2155, 2003} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I96
Goto(I61,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3836, 3837, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I61,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253, 1687, 1699] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1687, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= function_expression->identifier(expression_list),, primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I98
Goto(I61,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99
Goto(I61,constant_expression) = Closure( [1611, 1623] ) = {1611, 1623} ={ expression->constant_expression,, expression->constant_expression,) } = I100


Goto(I63,or_operator) = Closure( [3257, 3266] ) = {4100, 4102, 4103, 3615, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 3257, 1212, 1214, 1215, 3266, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I101
Goto(I63,||) = Closure( [4554, 4522, 4525, 4547] ) = {4522, 4554, 4547, 4525} ={ or_operator->||,number or_operator->||,( or_operator->||,identifier or_operator->||,! } = I43




Goto(I67,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I67,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I67,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I67,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I67,bool_operator) = Closure( [3691, 3703, 3709, 3710, 3713, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3703, 3709, 4222, 4223, 3710, 3713, 3715, 4232, 3720, 4234, 4235, 3722, 3723, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4330, 4331, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,+ single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I102
Goto(I67,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I67,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50

Goto(I68,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I68,primary_expression) = Closure( [4392, 4393, 4394, 4397, 4399, 4404, 4406, 4407, 4374, 4375, 4386, 4387, 4384] ) = {4384, 4386, 4387, 4392, 4393, 4394, 4397, 4399, 4404, 4406, 4407, 4374, 4375} ={ third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= } = I103
Goto(I68,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I68,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74

Goto(I69,and_operator) = Closure( [3494, 3482, 3485] ) = {4100, 4102, 4103, 3615, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 1359, 4432, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3482, 3995, 3485, 4004, 3494, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) first_expression->second_expression,+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I105
Goto(I69,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I70,second_operator) = Closure( [4146, 4147, 4156, 4158, 4159, 4164, 4165, 4166, 4169, 4171, 4176, 4178, 4179] ) = {1281, 1283, 1288, 1290, 1291, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1205, 1334, 1335, 1207, 4156, 1212, 4158, 4159, 1344, 1214, 1346, 1347, 4164, 4165, 4166, 1215, 1352, 1353, 1354, 4169, 4171, 1357, 1359, 4176, 4178, 4179, 1364, 1366, 1367, 1258, 1259, 1268, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->identifier,|| primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),) primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I106
Goto(I70,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I70,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I71,)) = Closure( [1478, 1448, 1449, 1480, 1481, 1455, 1458, 1459, 1460, 1461, 1466, 1467, 1468, 1473] ) = {1473, 1478, 1480, 1448, 1449, 1481, 1455, 1458, 1459, 1460, 1461, 1466, 1467, 1468} ={ primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),<= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& } = I107

Goto(I72,first_operator) = Closure( [3943, 3948, 3950, 3951, 3938, 3919, 3928, 3930, 3931, 3937, 3941] ) = {1281, 1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 1354, 4425, 1353, 1357, 4430, 1359, 4432, 3919, 4431, 4435, 1364, 4437, 1366, 1367, 3928, 4442, 3930, 4444, 4445, 3931, 3937, 3938, 3941, 3943, 3948, 3950, 3951, 4093, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 4254, 4255, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4070, 4071, 4328, 1258, 4330, 4331, 1259, 4080, 4082, 4083, 1268, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,) primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- primary_expression->(expression),&& third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),) third_expression->primary_expression,* primary_expression->(expression),== third_expression->primary_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,+ third_expression->primary_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,- third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I108
Goto(I72,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I72,-) = Closure( [5231, 5238, 5206, 5209] ) = {5209, 5206, 5238, 5231} ={ first_operator->-,! first_operator->-,number first_operator->-,( first_operator->-,identifier } = I60

Goto(I73,() = Closure( [1737] ) = {4100, 4102, 4103, 3093, 3615, 3105, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 3169, 3181, 1649, 3190, 1661, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 3767, 1212, 1214, 1215, 3777, 3779, 1737, 4298, 4299, 3785, 3786, 3789, 3791, 4308, 4309, 4310, 4311, 3796, 3798, 3799, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 1283, 3843, 3333, 1288, 1290, 1291, 3852, 3853, 3342, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 1851, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 1965, 4017, 4019, 4024, 4026, 4027, 1497, 3549, 1509, 3558, 4070, 4071, 3561, 4080, 4081, 3570, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== single_bool_expression->first_expression,!= primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< function_expression->identifier(expression_list),) third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| single_bool_expression->first_expression,<= third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== first_expression->first_expressionfirst_operatorsecond_expression,!= or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= expression_list->expressionexpression_list_suffix,) third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& expression_list->,) first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I109

Goto(I74,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I74,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I74,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I74,function_expression) = Closure( [1547] ) = {1547} ={ expression->function_expression,) } = I65
Goto(I74,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4483, 4482] ) = {4480, 4450, 4451, 4483, 4482, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,<= third_expression->primary_expression,|| third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I74,single_bool_expression) = Closure( [3653, 3665, 3672, 3671, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I74,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I74,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I74,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I74,expression) = Closure( [1410, 1411, 1420, 1422, 1423, 1428, 1429, 1430, 1433, 1435, 1440, 1442, 1443] ) = {1440, 1410, 1411, 1442, 1443, 1420, 1422, 1423, 1428, 1429, 1430, 1433, 1435} ={ primary_expression->(expression),>= primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== } = I110
Goto(I74,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I74,identifier) = Closure( [1699, 1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I73
Goto(I74,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I74,constant_expression) = Closure( [1623] ) = {1623} ={ expression->constant_expression,) } = I75


Goto(I76,{) = Closure( [6391, 6392, 6405, 6385] ) = {6528, 6533, 6405, 6391, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6523, 6524} ={ statement_list->statement_liststatement,return statement_list->statement_liststatement,{ compound_statement->{statement_list},# compound_statement->{statement_list},float statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I111
Goto(I76,compound_statement) = Closure( [5670, 5663, 5683, 5669] ) = {5683, 5669, 5670, 5663} ={ function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,# function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,float function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,int function_definition->type_specifieridentifierM_function_definition(function_parameter_list)compound_statement,void } = I112



Goto(I79,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I79,function_parameter) = Closure( [6069] ) = {6145, 5993, 6069, 6183} ={ function_parameter_list_suffix->,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->void,) } = I113
Goto(I79,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I79,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I79,type_specifier) = Closure( [6297, 6271, 6285] ) = {6297, 6285, 6271} ={ function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,void } = I40


Goto(I81,and_operator) = Closure( [3494, 3469, 3473, 3482] ) = {4100, 4102, 4103, 3615, 3621, 3625, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4309, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 1347, 4419, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3469, 3473, 3482, 3995, 4001, 4004, 4005, 3494, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,, third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I53
Goto(I81,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I82,first_operator) = Closure( [3919, 3925, 3928, 3929, 3930, 3931, 3937, 3938, 3943, 3948, 3950, 3951] ) = {1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 4419, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 3919, 4431, 4432, 1359, 1364, 3925, 4437, 1366, 3928, 3929, 3930, 3931, 4442, 4444, 1367, 4445, 3937, 3938, 3943, 3948, 3950, 3951, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4323, 4070, 4071, 4328, 1258, 1259, 4330, 4077, 4331, 4080, 1265, 4081, 4082, 1268, 1269, 1270, 4083, 4088, 4089, 4090, 1271, 1276, 1277, 1278, 4095} ={ primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= first_expression->first_expressionfirst_operatorsecond_expression,; third_expression->primary_expression,== primary_expression->(expression),|| first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< third_expression->primary_expression,>= third_expression->primary_expression,|| primary_expression->(expression),<= third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,; third_expression->!primary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->number,; second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- primary_expression->number,+ primary_expression->number,, primary_expression->number,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I58
Goto(I82,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I82,-) = Closure( [5206, 5209, 5231, 5238] ) = {5209, 5238, 5206, 5231} ={ first_operator->-,! first_operator->-,( first_operator->-,number first_operator->-,identifier } = I60

Goto(I83,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I83,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I83,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I83,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I83,bool_operator) = Closure( [3691, 3697, 3701, 3703, 3709, 3710, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3697, 3701, 3703, 3709, 4222, 4223, 3710, 3715, 4229, 4232, 4233, 4234, 4235, 3720, 3722, 3723, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4330, 4331, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 4419, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 4432, 1359, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4001, 4004, 4005, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I48
Goto(I83,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I83,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50


Goto(I85,second_operator) = Closure( [4146, 4147, 4153, 4156, 4157, 4158, 4159, 4164, 4165, 4166, 4171, 4176, 4178, 4179] ) = {1283, 1288, 1290, 1291, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1334, 1335, 1207, 4153, 4156, 4157, 1341, 4158, 1344, 1345, 1346, 1347, 4164, 4165, 4159, 4166, 1352, 1353, 1354, 4171, 1359, 4176, 1212, 4178, 1364, 4179, 1366, 1367, 1214, 1215, 1258, 1259, 1265, 1268, 1269, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, primary_expression->(expression),; second_expression->second_expressionsecond_operatorprimary_expression,- primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,|| primary_expression->(expression),>= second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I55
Goto(I85,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I85,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57


Goto(I87,or_operator) = Closure( [3245, 3257, 3266] ) = {4100, 4102, 4103, 3615, 3625, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 3245, 1200, 1201, 1202, 1205, 3767, 1207, 3257, 1212, 1214, 1215, 3777, 3266, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3549, 3558, 4070, 4071, 3561, 4080, 4081, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,, and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I114
Goto(I87,||) = Closure( [4554, 4522, 4525, 4547] ) = {4522, 4554, 4547, 4525} ={ or_operator->||,number or_operator->||,( or_operator->||,identifier or_operator->||,! } = I43




Goto(I91,)) = Closure( [1801, 1797] ) = {1801, 1797} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),; } = I115

Goto(I92,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I92,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I92,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I92,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I92,bool_operator) = Closure( [3691, 3701, 3703, 3709, 3710, 3713, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3701, 3703, 3709, 4222, 4223, 3710, 3713, 3715, 4232, 4233, 4234, 4235, 3720, 3722, 3723, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4330, 4331, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I116
Goto(I92,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I92,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50

Goto(I93,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I93,primary_expression) = Closure( [4392, 4393, 4394, 4397, 4399, 4404, 4406, 4407, 4374, 4375, 4386, 4387, 4384, 4385] ) = {4384, 4385, 4386, 4387, 4392, 4393, 4394, 4397, 4399, 4404, 4406, 4407, 4374, 4375} ={ third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= } = I117
Goto(I93,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I93,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99

Goto(I94,and_operator) = Closure( [3494, 3473, 3482, 3485] ) = {4100, 4102, 4103, 3615, 3625, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4309, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 1359, 4432, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3473, 3482, 3995, 3485, 4004, 4005, 3494, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,, third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) first_expression->second_expression,+ first_expression->second_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I119
Goto(I94,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I95,second_operator) = Closure( [4146, 4147, 4156, 4157, 4158, 4159, 4164, 4165, 4166, 4169, 4171, 4176, 4178, 4179] ) = {1281, 1283, 1288, 1290, 1291, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1205, 1334, 1335, 1207, 4156, 4157, 4158, 4159, 1344, 1345, 1346, 1347, 4164, 4165, 4166, 1214, 1352, 1353, 1354, 4169, 4171, 1357, 1359, 4176, 1212, 4178, 1364, 4179, 1366, 1367, 1215, 1258, 1259, 1268, 1269, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,|| primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),) primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,|| primary_expression->(expression),>= second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I120
Goto(I95,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I95,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I96,,) = Closure( [2041] ) = {4100, 4102, 4103, 3093, 3615, 3105, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 4089, 3169, 3181, 1649, 3190, 1661, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1497, 3549, 1509, 3558, 4070, 4071, 3561, 4080, 4081, 4082, 4083, 3570, 4088, 2041, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* expression_list_suffix->,expressionexpression_list_suffix,) second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I121
Goto(I96,expression_list_suffix) = Closure( [1927] ) = {1927} ={ expression_list->expressionexpression_list_suffix,) } = I122

Goto(I97,first_operator) = Closure( [3919, 3928, 3929, 3930, 3931, 3937, 3938, 3941, 3943, 3948, 3950, 3951] ) = {1281, 1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 3919, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 3928, 3929, 3930, 3931, 4442, 4444, 4445, 3937, 3938, 3941, 3943, 3948, 3950, 3951, 4093, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4070, 4071, 4328, 1258, 1259, 4330, 4331, 4080, 4081, 4082, 4083, 1268, 1269, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,) primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I123
Goto(I97,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I97,-) = Closure( [5206, 5209, 5231, 5238] ) = {5209, 5238, 5206, 5231} ={ first_operator->-,! first_operator->-,( first_operator->-,number first_operator->-,identifier } = I60

Goto(I98,() = Closure( [1737, 1725] ) = {4100, 4102, 4103, 3093, 3105, 3169, 3181, 3190, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 1283, 3333, 1288, 1290, 1291, 3342, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 1497, 3549, 1509, 3558, 3561, 3570, 3615, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 1649, 1661, 3767, 1725, 3777, 3779, 1737, 3785, 3786, 3789, 3791, 3796, 3798, 3799, 3843, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1851, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 1965, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= or_bool_expression->and_bool_expression,|| primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) and_bool_expression->single_bool_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) single_bool_expression->first_expression,!= function_expression->identifier(expression_list),, single_bool_expression->first_expression,, single_bool_expression->first_expression,< function_expression->identifier(expression_list),) single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| single_bool_expression->first_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= expression_list->expressionexpression_list_suffix,) first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& expression_list->,) first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I124

Goto(I99,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I99,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I99,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I99,function_expression) = Closure( [1547] ) = {1547} ={ expression->function_expression,) } = I65
Goto(I99,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4483, 4482] ) = {4480, 4450, 4451, 4483, 4482, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,<= third_expression->primary_expression,|| third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I99,single_bool_expression) = Closure( [3653, 3665, 3672, 3671, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I99,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I99,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I99,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I99,expression) = Closure( [1410, 1411, 1420, 1421, 1422, 1423, 1428, 1429, 1430, 1433, 1435, 1440, 1442, 1443] ) = {1440, 1410, 1411, 1442, 1443, 1420, 1421, 1422, 1423, 1428, 1429, 1430, 1433, 1435} ={ primary_expression->(expression),>= primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== } = I125
Goto(I99,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I99,identifier) = Closure( [1699, 1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I73
Goto(I99,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I99,constant_expression) = Closure( [1623] ) = {1623} ={ expression->constant_expression,) } = I75


Goto(I101,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I101,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I101,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I101,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I101,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I101,and_bool_expression) = Closure( [3295, 3304, 3444, 3447, 3456] ) = {3456, 3304, 4585, 4560, 4592, 4563, 3444, 3447, 3295} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| and_operator->&&,identifier and_operator->&&,number and_operator->&&,( and_operator->&&,! and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) } = I126
Goto(I101,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I101,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I101,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I101,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74

Goto(I102,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I102,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I102,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I102,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4368, 4369] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I102,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I102,first_expression) = Closure( [3729, 3741, 3747, 3748, 3751, 3753, 3758, 3760, 3761, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3729, 3741, 3747, 3748, 5092, 3751, 5095, 3753, 3881, 3758, 3760, 3761, 5168, 5171, 3890, 3892, 3893, 3899, 3900, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& first_operator->+,number single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) first_operator->+,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= first_operator->-,number first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I127
Goto(I102,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I102,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74



Goto(I105,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I105,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I105,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I105,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3520, 3523, 3532] ) = {4864, 4737, 4867, 4744, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3520, 3523, 3653, 4940, 4813, 3532, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I128
Goto(I105,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I105,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I105,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I105,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I105,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74

Goto(I106,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I106,primary_expression) = Closure( [4184, 4185, 4194, 4196, 4197, 4202, 4203, 4204, 4207, 4209, 4214, 4216, 4217] ) = {4217, 4194, 4196, 4197, 4202, 4203, 4204, 4207, 4209, 4214, 4184, 4185, 4216} ={ second_expression->second_expressionsecond_operatorprimary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,|| } = I129
Goto(I106,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I106,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74


Goto(I108,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I108,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I108,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4470, 4469, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I108,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4368, 4369] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I108,second_expression) = Closure( [4138, 4140, 4141, 3957, 3966, 3968, 3969, 3975, 3976, 3979, 3981, 3986, 3988, 3989, 4131, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {3968, 3969, 3975, 5320, 3976, 3979, 4108, 3981, 4109, 3986, 3988, 5269, 3989, 4118, 4120, 4121, 5276, 4126, 4127, 4128, 5345, 4131, 4133, 5352, 4138, 4140, 4141, 3957, 5244, 3966} ={ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> second_operator->/,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) second_expression->second_expressionsecond_operatorprimary_expression,/ first_expression->first_expressionfirst_operatorsecond_expression,== second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| second_operator->*,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_operator->/,identifier second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,!= second_operator->*,number first_expression->first_expressionfirst_operatorsecond_expression,+ } = I130
Goto(I108,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I108,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1392, 1391, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74

Goto(I109,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I109,or_bool_expression) = Closure( [3131, 3143, 3207, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3207, 3219, 3131, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I87
Goto(I109,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I109,function_expression) = Closure( [1535, 1547] ) = {1547, 1535} ={ expression->function_expression,) expression->function_expression,, } = I89
Goto(I109,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I109,expression_list) = Closure( [1775] ) = {1775} ={ function_expression->identifier(expression_list),) } = I131
Goto(I109,single_bool_expression) = Closure( [3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3587, 3596, 3599, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I109,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I109,and_bool_expression) = Closure( [3359, 3371, 3380, 3435, 3444, 3447, 3456] ) = {3456, 4585, 3371, 3435, 4560, 4592, 4563, 3380, 3444, 3447, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->and_bool_expression,, } = I94
Goto(I109,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I109,expression) = Closure( [1889] ) = {1889, 2155, 2003} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I96
Goto(I109,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3836, 3837, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I109,identifier) = Closure( [1687, 1699, 1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1687, 1240, 1239, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* function_expression->identifier(expression_list),, primary_expression->identifier,&& primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,== } = I98
Goto(I109,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99
Goto(I109,constant_expression) = Closure( [1611, 1623] ) = {1611, 1623} ={ expression->constant_expression,, expression->constant_expression,) } = I100

Goto(I110,)) = Closure( [1478, 1448, 1449, 1480, 1481, 1458, 1460, 1461, 1466, 1467, 1468, 1471, 1473] ) = {1473, 1478, 1480, 1448, 1449, 1481, 1458, 1460, 1461, 1466, 1467, 1468, 1471} ={ primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) } = I132

Goto(I111,statement_list) = Closure( [6566, 6571, 6443, 6429, 6537, 6543, 6544, 6545, 6547, 6423, 6555, 6430, 6561, 6562] ) = {6657, 6658, 6659, 6661, 6669, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6751, 6752, 6756, 6761, 6803, 6809, 6810, 6811, 6813, 6821, 8361, 6827, 6828, 8367, 6832, 7345, 8368, 8369, 8371, 6837, 7867, 8379, 7873, 7874, 7875, 8385, 7877, 8390, 8386, 8395, 6347, 7885, 6353, 6354, 6355, 7891, 6357, 7892, 7383, 7896, 7387, 7901, 6365, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6903, 6904, 6908, 6913, 6423, 6429, 6430, 6443, 6955, 7981, 6961, 6962, 7987, 7988, 6963, 7989, 6965, 7991, 2875, 6973, 7999, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 7037, 381, 7038, 7039, 7041, 387, 388, 389, 2951, 391, 6537, 7049, 6543, 6544, 6545, 399, 6547, 7060, 7055, 405, 7056, 406, 7065, 410, 6555, 415, 6561, 6562, 6566, 6571, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 7113, 7114, 7115, 8651, 7117, 8652, 8656, 3027, 8661, 7125, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float statement->selection_statement,return assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->selection_statement,{ jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,identifier jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} jump_statement->return;,identifier compound_statement->{statement_list},; jump_statement->return;,while assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,{ compound_statement->{statement_list},if statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ compound_statement->{statement_list},void compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},# statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} statement->compound_statement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; type_specifier->int,identifier statement->compound_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void statement->declaration,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement_list->statement_liststatement,void statement->declaration,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if statement_list->statement_liststatement,; statement->declaration,return statement->declaration,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->declaration,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return statement_list->statement_liststatement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier expression_statement->assignment_expression_list;,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I133


Goto(I113,function_parameter_list_suffix) = Closure( [6107] ) = {6107} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) } = I134
Goto(I113,void) = Closure( [6221] ) = {6221} ={ function_parameter_list_suffix->void,) } = I78
Goto(I113,,) = Closure( [6031] ) = {3027, 6259, 2951, 6233, 6247, 2875, 6031} ={ type_specifier->void,identifier function_parameter->type_specifieridentifier,) type_specifier->float,identifier function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,, type_specifier->int,identifier function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) } = I79

Goto(I114,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I114,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I114,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I114,single_bool_expression) = Closure( [3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3587, 3596, 3599, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I114,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I114,and_bool_expression) = Closure( [3283, 3295, 3304, 3435, 3444, 3447, 3456] ) = {3456, 3304, 4585, 3435, 4560, 4592, 3283, 4563, 3444, 3447, 3295} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| and_operator->&&,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, and_operator->&&,! and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) } = I135
Goto(I114,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I114,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I114,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I114,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99


Goto(I116,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I116,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I116,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I116,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4368, 4369] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I116,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I116,first_expression) = Closure( [3729, 3739, 3741, 3747, 3748, 3751, 3753, 3758, 3760, 3761, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3729, 3739, 3741, 3747, 3748, 3751, 3753, 3881, 3758, 3760, 3761, 5168, 5171, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 5092, 5095, 5117} ={ first_operator->+,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= first_operator->-,number first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( first_operator->+,number first_operator->+,! first_operator->+,identifier } = I136
Goto(I116,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I116,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99



Goto(I119,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I119,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I119,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I119,single_bool_expression) = Closure( [3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3511, 3520, 3523, 3532] ) = {4864, 4737, 4867, 4744, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 3511, 4668, 3520, 3523, 3653, 4940, 4813, 3532, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, bool_operator-><,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I137
Goto(I119,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I119,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I119,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I119,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I119,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99

Goto(I120,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I120,primary_expression) = Closure( [4184, 4185, 4194, 4195, 4196, 4197, 4202, 4203, 4204, 4207, 4209, 4214, 4216, 4217] ) = {4217, 4194, 4195, 4196, 4197, 4202, 4203, 4204, 4207, 4209, 4214, 4184, 4185, 4216} ={ second_expression->second_expressionsecond_operatorprimary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,|| } = I138
Goto(I120,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1252, 1250, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I120,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99

Goto(I121,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I121,or_bool_expression) = Closure( [3131, 3143, 3207, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3207, 3219, 3131, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I87
Goto(I121,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I121,function_expression) = Closure( [1535, 1547] ) = {1547, 1535} ={ expression->function_expression,) expression->function_expression,, } = I89
Goto(I121,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I121,single_bool_expression) = Closure( [3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3587, 3596, 3599, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I121,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I121,and_bool_expression) = Closure( [3359, 3371, 3380, 3435, 3444, 3447, 3456] ) = {3456, 4585, 3371, 3435, 4560, 4592, 4563, 3380, 3444, 3447, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->and_bool_expression,, } = I94
Goto(I121,second_expression) = Closure( [4138, 4140, 4141, 4127, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I121,expression) = Closure( [2079] ) = {2155, 2003, 2079} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list_suffix->,expressionexpression_list_suffix,) } = I139
Goto(I121,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I121,identifier) = Closure( [1687, 1699, 1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1687, 1240, 1239, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* function_expression->identifier(expression_list),, primary_expression->identifier,&& primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,== } = I98
Goto(I121,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99
Goto(I121,constant_expression) = Closure( [1611, 1623] ) = {1611, 1623} ={ expression->constant_expression,, expression->constant_expression,) } = I100


Goto(I123,number) = Closure( [1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329, 1296, 1297, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I123,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I123,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I123,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4368, 4369] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I123,second_expression) = Closure( [4138, 4140, 4141, 3957, 3966, 3967, 3968, 3969, 3975, 3976, 3979, 3981, 3986, 3988, 3989, 4131, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {3968, 3969, 3975, 3976, 3979, 4108, 3981, 4109, 3986, 3988, 5269, 3989, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 5320, 5345, 5352, 3957, 5244, 3966, 3967} ={ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) second_expression->second_expressionsecond_operatorprimary_expression,/ first_expression->first_expressionfirst_operatorsecond_expression,== second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| second_operator->*,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->/,number second_operator->/,identifier second_operator->/,( first_expression->first_expressionfirst_operatorsecond_expression,!= second_operator->*,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, } = I140
Goto(I123,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I118
Goto(I123,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99

Goto(I124,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I124,or_bool_expression) = Closure( [3131, 3143, 3207, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3207, 3219, 3131, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I87
Goto(I124,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I124,function_expression) = Closure( [1535, 1547] ) = {1547, 1535} ={ expression->function_expression,) expression->function_expression,, } = I89
Goto(I124,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I124,expression_list) = Closure( [1763, 1775] ) = {1763, 1775} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) } = I141
Goto(I124,single_bool_expression) = Closure( [3587, 3596, 3599, 3608, 3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685] ) = {4864, 4737, 3587, 4867, 4744, 3596, 3599, 3608, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier and_bool_expression->single_bool_expression,, bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) and_bool_expression->single_bool_expression,|| bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I124,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I124,and_bool_expression) = Closure( [3359, 3371, 3380, 3435, 3444, 3447, 3456] ) = {3456, 4585, 3371, 3435, 4560, 4592, 4563, 3380, 3444, 3447, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->and_bool_expression,, } = I94
Goto(I124,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I124,expression) = Closure( [1889] ) = {1889, 2155, 2003} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I96
Goto(I124,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3836, 3837, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I124,identifier) = Closure( [1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253, 1687, 1699] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1687, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= function_expression->identifier(expression_list),, primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I98
Goto(I124,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99
Goto(I124,constant_expression) = Closure( [1611, 1623] ) = {1611, 1623} ={ expression->constant_expression,, expression->constant_expression,) } = I100

Goto(I125,)) = Closure( [1478, 1448, 1449, 1480, 1481, 1458, 1459, 1460, 1461, 1466, 1467, 1468, 1471, 1473] ) = {1473, 1478, 1480, 1448, 1449, 1481, 1458, 1459, 1460, 1461, 1466, 1467, 1468, 1471} ={ primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) } = I142

Goto(I126,and_operator) = Closure( [3494, 3482, 3485] ) = {4100, 4102, 4103, 3615, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 1359, 4432, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3482, 3995, 3485, 4004, 3494, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) first_expression->second_expression,+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I105
Goto(I126,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I127,first_operator) = Closure( [3943, 3948, 3950, 3951, 3919, 3928, 3930, 3931, 3937, 3938, 3941] ) = {1281, 1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 1359, 3919, 4431, 4432, 4435, 1364, 4437, 1366, 1367, 3928, 4442, 3930, 4444, 4445, 3931, 3937, 3938, 3941, 3943, 3948, 3950, 3951, 4093, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 4254, 4255, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4070, 4071, 4328, 1258, 4330, 4331, 1259, 4080, 4082, 4083, 1268, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,) primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* primary_expression->(expression),== first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,+ third_expression->primary_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,- third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I108
Goto(I127,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I127,-) = Closure( [5231, 5238, 5206, 5209] ) = {5209, 5206, 5238, 5231} ={ first_operator->-,! first_operator->-,number first_operator->-,( first_operator->-,identifier } = I60

Goto(I128,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I128,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I128,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I128,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I128,bool_operator) = Closure( [3691, 3703, 3709, 3710, 3713, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3703, 3709, 4222, 4223, 3710, 3713, 3715, 4232, 3720, 4234, 4235, 3722, 3723, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4330, 4331, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,+ single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I102
Goto(I128,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I128,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50


Goto(I130,second_operator) = Closure( [4146, 4147, 4156, 4158, 4159, 4164, 4165, 4166, 4169, 4171, 4176, 4178, 4179] ) = {1281, 1283, 1288, 1290, 1291, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1205, 1334, 1335, 1207, 4156, 1212, 4158, 4159, 1344, 1214, 1346, 1347, 4164, 4165, 4166, 1215, 1352, 1353, 1354, 4169, 4171, 1357, 1359, 4176, 4178, 4179, 1364, 1366, 1367, 1258, 1259, 1268, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->identifier,|| primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,<= primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),) primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I106
Goto(I130,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I130,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I131,)) = Closure( [1813] ) = {1813} ={ function_expression->identifier(expression_list),) } = I143


Goto(I133,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6789, 6790, 6794, 6799] ) = {6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I144
Goto(I133,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I133,}) = Closure( [6461, 6467, 6468, 6481] ) = {6481, 6467, 6468, 6461} ={ compound_statement->{statement_list},# compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},void } = I146
Goto(I133,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I147
Goto(I133,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7098, 7093, 7094, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I148
Goto(I133,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7913, 7915, 7923, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7913, 7915, 1265, 7923, 1268, 3317, 1270, 1271, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,} jump_statement->return;,; primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I149
Goto(I133,{) = Closure( [6385, 6391, 6392, 6393, 6395, 6403, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I150
Goto(I133,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I133,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while } = I151
Goto(I133,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I133,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I133,statement) = Closure( [6575, 6581, 6582, 6583, 6585, 6593, 6599, 6600, 6604, 6609] ) = {6593, 6599, 6600, 6604, 6575, 6609, 6581, 6582, 6583, 6585} ={ statement_list->statement_liststatement,if statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,void statement_list->statement_liststatement,{ statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->statement_liststatement,; } = I152
Goto(I133,assignment_expression_list) = Closure( [7145, 7151, 7152, 7153, 7155, 7163, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if } = I153
Goto(I133,if) = Closure( [8399, 8405, 8406, 8407, 8409, 8417, 8423, 8428, 8424, 8433, 8019, 8025, 8026, 8027, 8029, 8037, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8037, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I154
Goto(I133,compound_statement) = Closure( [6993, 6999, 7000, 7001, 7003, 7011, 7017, 7018, 7022, 7027] ) = {7011, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I155
Goto(I133,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I133,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I157
Goto(I133,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I158
Goto(I133,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I159


Goto(I135,and_operator) = Closure( [3494, 3473, 3482, 3485] ) = {4100, 4102, 4103, 3615, 3625, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4309, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 1359, 4432, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3473, 3482, 3995, 3485, 4004, 4005, 3494, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,, third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) first_expression->second_expression,+ first_expression->second_expression,, and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I119
Goto(I135,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I136,first_operator) = Closure( [3919, 3928, 3929, 3930, 3931, 3937, 3938, 3941, 3943, 3948, 3950, 3951] ) = {1281, 1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 3919, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 3928, 3929, 3930, 3931, 4442, 4444, 4445, 3937, 3938, 3941, 3943, 3948, 3950, 3951, 4093, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4070, 4071, 4328, 1258, 1259, 4330, 4331, 4080, 4081, 4082, 4083, 1268, 1269, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,) primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I123
Goto(I136,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I136,-) = Closure( [5206, 5209, 5231, 5238] ) = {5209, 5238, 5206, 5231} ={ first_operator->-,! first_operator->-,( first_operator->-,number first_operator->-,identifier } = I60

Goto(I137,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I137,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I137,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I137,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I137,bool_operator) = Closure( [3691, 3701, 3703, 3709, 3710, 3713, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3701, 3703, 3709, 4222, 4223, 3710, 3713, 3715, 4232, 4233, 4234, 4235, 3720, 3722, 3723, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4254, 4255, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 1212, 1214, 1215, 4298, 4299, 4308, 4309, 4310, 4311, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4330, 4331, 1268, 1269, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 4430, 4431, 4432, 1359, 4435, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 4070, 4071, 4080, 4081, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== third_expression->primary_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I116
Goto(I137,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I137,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50


Goto(I139,,) = Closure( [2041] ) = {4100, 4102, 4103, 3093, 3615, 3105, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 4089, 3169, 3181, 1649, 3190, 1661, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3853, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1497, 3549, 1509, 3558, 4070, 4071, 3561, 4080, 4081, 4082, 4083, 3570, 4088, 2041, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* expression_list_suffix->,expressionexpression_list_suffix,) second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I121
Goto(I139,expression_list_suffix) = Closure( [2117] ) = {2117} ={ expression_list_suffix->,expressionexpression_list_suffix,) } = I160

Goto(I140,second_operator) = Closure( [4146, 4147, 4156, 4157, 4158, 4159, 4164, 4165, 4166, 4169, 4171, 4176, 4178, 4179] ) = {1281, 1283, 1288, 1290, 1291, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1205, 1334, 1335, 1207, 4156, 4157, 4158, 4159, 1344, 1345, 1346, 1347, 4164, 4165, 4166, 1214, 1352, 1353, 1354, 4169, 4171, 1357, 1359, 4176, 1212, 4178, 1364, 4179, 1366, 1367, 1215, 1258, 1259, 1268, 1269, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,|| primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),) primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= primary_expression->identifier,>= second_expression->second_expressionsecond_operatorprimary_expression,|| primary_expression->(expression),>= second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I120
Goto(I140,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I140,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I141,)) = Closure( [1801, 1813] ) = {1801, 1813} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) } = I161




Goto(I145,assignment_expression_list_suffix) = Closure( [7307] ) = {7307} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I162
Goto(I145,,) = Closure( [7573] ) = {7387, 7573, 7383} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,; } = I163




Goto(I149,number) = Closure( [1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I149,or_bool_expression) = Closure( [3127, 3203, 3228] ) = {3203, 4516, 4484, 4487, 3127, 3228, 4509} ={ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I165
Goto(I149,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I149,function_expression) = Closure( [1531] ) = {1531} ={ expression->function_expression,; } = I167
Goto(I149,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I149,single_bool_expression) = Closure( [3653, 3659, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3596, 3608] ) = {4864, 4737, 4867, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I169
Goto(I149,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I149,;) = Closure( [7943, 7949, 7950, 7951, 7953, 7961, 7967, 7968, 7972, 7977] ) = {7968, 7972, 7943, 7977, 7949, 7950, 7951, 7953, 7961, 7967} ={ jump_statement->return;,while jump_statement->return;,return jump_statement->return;,void jump_statement->return;,{ jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} jump_statement->return;,; jump_statement->return;,if jump_statement->return;,identifier } = I171
Goto(I149,and_bool_expression) = Closure( [3355, 3380, 3431, 3444, 3456] ) = {3456, 3431, 4585, 4560, 4592, 4563, 3380, 3444, 3355} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_operator->&&,identifier and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& or_bool_expression->and_bool_expression,; } = I172
Goto(I149,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4033, 4039, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4115, 4118, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I173
Goto(I149,expression) = Closure( [7791, 7797, 7798, 7799, 7801, 7809, 7815, 7816, 7820, 7825] ) = {7809, 7815, 7816, 7820, 7791, 7825, 7797, 7798, 7799, 7801} ={ jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,void jump_statement->returnexpression;,{ jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; } = I174
Goto(I149,first_expression) = Closure( [3805, 3811, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3887, 5171, 3890, 3829, 3892, 3893, 3834, 3899, 3836, 5117} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier } = I175
Goto(I149,identifier) = Closure( [1683, 1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1683, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< function_expression->identifier(expression_list),; primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I176
Goto(I149,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177
Goto(I149,constant_expression) = Closure( [1607] ) = {1607} ={ expression->constant_expression,; } = I178

Goto(I150,statement_list) = Closure( [6566, 6441, 6571, 6447, 6448, 6452, 6457, 6429, 6433, 6537, 6543, 6544, 6545, 6547, 6423, 6555, 6430, 6431, 6561, 6562] ) = {6657, 6658, 6659, 6661, 6669, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6751, 6752, 6756, 6761, 6803, 6809, 6810, 6811, 6813, 6821, 8361, 6827, 6828, 8367, 6832, 7345, 8368, 8369, 8371, 6837, 7867, 8379, 7873, 7874, 7875, 8385, 7877, 8390, 8386, 8395, 6347, 7885, 6353, 6354, 6355, 7891, 6357, 7892, 7383, 7896, 7387, 7901, 6365, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6903, 6904, 6908, 6913, 6423, 6429, 6430, 6431, 6433, 6441, 6955, 7981, 6447, 6448, 6961, 6962, 7987, 6452, 7988, 6963, 7989, 6965, 6457, 7991, 2875, 6973, 7999, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 2951, 391, 6537, 7049, 6543, 6544, 6545, 399, 6547, 7060, 7055, 405, 7056, 406, 7065, 410, 6555, 415, 6561, 6562, 6566, 6571, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 7113, 7114, 7115, 8651, 7117, 8652, 8656, 3027, 8661, 7125, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float statement->selection_statement,return assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->selection_statement,{ jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,identifier jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} jump_statement->return;,identifier compound_statement->{statement_list},; jump_statement->return;,while assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,{ compound_statement->{statement_list},if statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ compound_statement->{statement_list},void compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},if statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float compound_statement->{statement_list},return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} statement->compound_statement,; compound_statement->{statement_list},{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; type_specifier->int,identifier statement->compound_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement_list->statement_liststatement,void statement->declaration,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if statement_list->statement_liststatement,; statement->declaration,return statement->declaration,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->declaration,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return statement_list->statement_liststatement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier expression_statement->assignment_expression_list;,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I179



Goto(I153,;) = Closure( [7207, 7208, 7212, 7183, 7217, 7189, 7190, 7191, 7193, 7201] ) = {7201, 7207, 7208, 7212, 7183, 7217, 7189, 7190, 7191, 7193} ={ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; } = I180

Goto(I154,() = Closure( [8437, 8057, 8443, 8444, 8445, 8063, 8447, 8064, 8065, 8067, 8455, 8075, 8461, 8462, 8081, 8466, 8082, 8086, 8471, 8091] ) = {4100, 4102, 4103, 3615, 3105, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 8437, 1270, 1271, 8443, 1276, 1277, 1278, 8444, 8445, 1281, 8447, 3843, 1283, 3333, 8455, 1288, 1290, 1291, 3852, 8461, 3854, 3855, 3342, 8462, 8466, 3861, 3862, 8471, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 8057, 8063, 8064, 8065, 8067, 8075, 8081, 8082, 8086, 3995, 8091, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ selection_statement->if(constant_expression)M_selection_statementstatement,void primary_expression->number,- primary_expression->number,< selection_statement->if(constant_expression)M_selection_statementstatement,float primary_expression->number,* primary_expression->number,> primary_expression->number,&& selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} primary_expression->number,) selection_statement->if(constant_expression)M_selection_statementstatement,; first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) selection_statement->if(constant_expression)M_selection_statementstatement,if primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ selection_statement->if(constant_expression)M_selection_statementstatement,identifier first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& selection_statement->if(constant_expression)M_selection_statementstatement,{ first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return first_expression->second_expression,!= selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I181


Goto(I156,-=) = Closure( [2356, 2359, 2381, 2388] ) = {2356, 2381, 2388, 2359} ={ assignment_operator->-=,number assignment_operator->-=,identifier assignment_operator->-=,( assignment_operator->-=,! } = I182
Goto(I156,^=) = Closure( [2660, 2663, 2685, 2692] ) = {2692, 2660, 2685, 2663} ={ assignment_operator->^=,( assignment_operator->^=,number assignment_operator->^=,identifier assignment_operator->^=,! } = I183
Goto(I156,=) = Closure( [2229, 2236, 2204, 2207] ) = {2204, 2236, 2229, 2207} ={ assignment_operator->=,number assignment_operator->=,( assignment_operator->=,identifier assignment_operator->=,! } = I184
Goto(I156,|=) = Closure( [2812, 2815, 2837, 2844] ) = {2844, 2812, 2837, 2815} ={ assignment_operator->|=,( assignment_operator->|=,number assignment_operator->|=,identifier assignment_operator->|=,! } = I185
Goto(I156,*=) = Closure( [2432, 2435, 2457, 2464] ) = {2432, 2457, 2435, 2464} ={ assignment_operator->*=,number assignment_operator->*=,identifier assignment_operator->*=,! assignment_operator->*=,( } = I186
Goto(I156,/=) = Closure( [2508, 2511, 2533, 2540] ) = {2540, 2508, 2533, 2511} ={ assignment_operator->/=,( assignment_operator->/=,number assignment_operator->/=,identifier assignment_operator->/=,! } = I187
Goto(I156,%=) = Closure( [2609, 2616, 2584, 2587] ) = {2616, 2609, 2587, 2584} ={ assignment_operator->%=,( assignment_operator->%=,identifier assignment_operator->%=,! assignment_operator->%=,number } = I188
Goto(I156,&=) = Closure( [2736, 2739, 2761, 2768] ) = {2736, 2761, 2739, 2768} ={ assignment_operator->&=,number assignment_operator->&=,identifier assignment_operator->&=,! assignment_operator->&=,( } = I189
Goto(I156,assignment_operator) = Closure( [7463, 7459] ) = {4100, 4102, 4103, 3089, 3093, 3615, 1569, 1573, 3621, 3625, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 3165, 3169, 1645, 1649, 3190, 4222, 4223, 4229, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 4309, 3798, 4419, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1269, 1270, 1271, 3317, 3321, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3853, 3854, 3855, 3342, 3861, 3862, 3867, 3872, 3874, 3875, 7459, 7463, 1334, 1335, 4412, 4413, 1341, 1344, 1345, 1346, 1347, 3393, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 3418, 4444, 4445, 3995, 4001, 4004, 4005, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 1497, 3545, 3549, 3558, 4070, 4071, 4077, 4080, 4081, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= third_expression->!primary_expression,, single_bool_expression->first_expression,|| third_expression->primary_expression,; third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,; or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; expression->function_expression,, and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,, and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I190
Goto(I156,+=) = Closure( [2280, 2283, 2305, 2312] ) = {2280, 2305, 2283, 2312} ={ assignment_operator->+=,number assignment_operator->+=,identifier assignment_operator->+=,! assignment_operator->+=,( } = I191

Goto(I157,N_iteration_statement) = Closure( [8710, 8711, 8713, 8721, 8727, 8728, 8732, 8703, 8737, 8709] ) = {8737, 8709, 8710, 8711, 8713, 8721, 8727, 8728, 8732, 8703} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void } = I192


Goto(I159,declaration_parameter) = Closure( [486, 457, 491, 464, 465, 463, 467, 475, 481, 482] ) = {481, 482, 486, 457, 491, 463, 464, 465, 1075, 467, 885, 475} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if } = I193
Goto(I159,identifier) = Closure( [619, 623] ) = {1117, 1113, 619, 1133, 623} ={ M_declaration_parameter->,, M_declaration_parameter->,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; M_declaration_parameter->,= declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, } = I22




Goto(I163,assignment_expression) = Closure( [7611] ) = {7535, 7611, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I194
Goto(I163,identifier) = Closure( [7425, 7421] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156


Goto(I165,or_operator) = Closure( [3241, 3266] ) = {4100, 4102, 4103, 3615, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 3241, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3266, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 3418, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I195
Goto(I165,||) = Closure( [4554, 4522, 4525, 4547] ) = {4522, 4554, 4547, 4525} ={ or_operator->||,number or_operator->||,( or_operator->||,identifier or_operator->||,! } = I43




Goto(I169,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I169,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I169,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I169,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I169,bool_operator) = Closure( [3691, 3697, 3703, 3709, 3710, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3697, 3703, 3709, 4222, 4223, 3710, 3715, 4229, 4232, 3720, 4234, 4235, 3722, 3723, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4310, 4311, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4330, 4331, 1265, 1268, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 4419, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 4432, 1359, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,; second_expression->third_expression,+ single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I196
Goto(I169,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I169,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50

Goto(I170,number) = Closure( [1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I170,primary_expression) = Closure( [4392, 4393, 4394, 4399, 4404, 4406, 4407, 4374, 4375, 4386, 4381, 4387, 4384] ) = {4384, 4386, 4387, 4392, 4393, 4394, 4399, 4404, 4406, 4407, 4374, 4375, 4381} ={ third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; } = I197
Goto(I170,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I170,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177


Goto(I172,and_operator) = Closure( [3494, 3469, 3482] ) = {4100, 4102, 4103, 3615, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3469, 3482, 3995, 4001, 4004, 3494, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I199
Goto(I172,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I173,second_operator) = Closure( [4146, 4147, 4153, 4156, 4158, 4159, 4164, 4165, 4166, 4171, 4176, 4178, 4179] ) = {1283, 1288, 1290, 1291, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1334, 1335, 1207, 4153, 4156, 1341, 4158, 4159, 1344, 1212, 1346, 1347, 4164, 4165, 4166, 1214, 1352, 1353, 1354, 4171, 1359, 4176, 4178, 4179, 1364, 1366, 1367, 1215, 1258, 1259, 1265, 1268, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->(expression),; second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->identifier,>= primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,|| primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I200
Goto(I173,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I173,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I174,;) = Closure( [7847, 7853, 7854, 7858, 7829, 7863, 7835, 7836, 7837, 7839] ) = {7847, 7853, 7854, 7858, 7829, 7863, 7835, 7836, 7837, 7839} ={ jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,void jump_statement->returnexpression;,{ jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; } = I201

Goto(I175,first_operator) = Closure( [3943, 3948, 3950, 3951, 3938, 3919, 3925, 3928, 3930, 3931, 3937] ) = {1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 4419, 1347, 4422, 1352, 4424, 1354, 4425, 1353, 4430, 1359, 4432, 3919, 4431, 1364, 4437, 1366, 1367, 3925, 3928, 4442, 3930, 4444, 4445, 3931, 3937, 3938, 3943, 3948, 3950, 3951, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 4254, 4255, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4310, 4311, 4316, 4317, 4318, 4323, 4070, 4071, 4328, 1258, 4330, 4331, 1259, 4077, 4080, 1265, 4082, 4083, 1268, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- primary_expression->(expression),&& third_expression->primary_expression,< primary_expression->(expression),> third_expression->primary_expression,* primary_expression->(expression),== third_expression->primary_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,; first_expression->first_expressionfirst_operatorsecond_expression,+ third_expression->primary_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,- third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->number,; second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I202
Goto(I175,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I175,-) = Closure( [5231, 5238, 5206, 5209] ) = {5209, 5206, 5238, 5231} ={ first_operator->-,! first_operator->-,number first_operator->-,( first_operator->-,identifier } = I60

Goto(I176,() = Closure( [1721] ) = {4100, 4102, 4103, 3093, 3615, 3105, 1573, 3625, 3627, 3633, 3634, 1585, 3637, 3639, 3644, 3646, 3647, 3169, 3181, 1649, 3190, 1661, 4222, 4223, 4232, 4233, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1207, 3767, 1721, 1212, 1214, 1215, 3777, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 4309, 4310, 4311, 3796, 3798, 3799, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1269, 1270, 1271, 3321, 1276, 1277, 1278, 1281, 1283, 3843, 3333, 1288, 1290, 1291, 3852, 3853, 3342, 3854, 3855, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 1851, 4412, 4413, 1344, 1345, 1346, 1347, 3397, 4422, 4423, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 1359, 4432, 3409, 1364, 4437, 1366, 1367, 4435, 4442, 3418, 4444, 4445, 3995, 4004, 4005, 4006, 4007, 4013, 4014, 1965, 4017, 4019, 4024, 4026, 4027, 1497, 3549, 1509, 3558, 4070, 4071, 3561, 4080, 4081, 3570, 4082, 4083, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) expression->constant_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) function_expression->identifier(expression_list),, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== single_bool_expression->first_expression,!= function_expression->identifier(expression_list),; primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,, single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ third_expression->!primary_expression,, third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| single_bool_expression->first_expression,<= third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< or_bool_expression->and_bool_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== first_expression->first_expressionfirst_operatorsecond_expression,!= or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,, or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= expression_list->expressionexpression_list_suffix,) third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, third_expression->primary_expression,+ third_expression->primary_expression,, primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,) third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& expression_list->,) first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,, and_bool_expression->single_bool_expression,, expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I203

Goto(I177,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I177,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I177,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I177,function_expression) = Closure( [1547] ) = {1547} ={ expression->function_expression,) } = I65
Goto(I177,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4483, 4482] ) = {4480, 4450, 4451, 4483, 4482, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,<= third_expression->primary_expression,|| third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I177,single_bool_expression) = Closure( [3653, 3665, 3672, 3671, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I177,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I177,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I177,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I177,expression) = Closure( [1410, 1411, 1417, 1420, 1422, 1423, 1428, 1429, 1430, 1435, 1440, 1442, 1443] ) = {1440, 1410, 1411, 1442, 1443, 1417, 1420, 1422, 1423, 1428, 1429, 1430, 1435} ={ primary_expression->(expression),>= primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== } = I204
Goto(I177,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I177,identifier) = Closure( [1699, 1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I73
Goto(I177,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I177,constant_expression) = Closure( [1623] ) = {1623} ={ expression->constant_expression,) } = I75


Goto(I179,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6789, 6790, 6794, 6799] ) = {6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I144
Goto(I179,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I179,}) = Closure( [6461, 6467, 6468, 6469, 6471, 6479, 6485, 6486, 6490, 6495] ) = {6467, 6468, 6469, 6471, 6479, 6485, 6486, 6490, 6461, 6495} ={ compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},void compound_statement->{statement_list},{ } = I205
Goto(I179,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I147
Goto(I179,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7098, 7093, 7094, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I148
Goto(I179,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7913, 7915, 7923, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7913, 7915, 1265, 7923, 1268, 3317, 1270, 1271, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,} jump_statement->return;,; primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I149
Goto(I179,{) = Closure( [6385, 6391, 6392, 6393, 6395, 6403, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I150
Goto(I179,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I179,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while } = I151
Goto(I179,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I179,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I179,statement) = Closure( [6575, 6581, 6582, 6583, 6585, 6593, 6599, 6600, 6604, 6609] ) = {6593, 6599, 6600, 6604, 6575, 6609, 6581, 6582, 6583, 6585} ={ statement_list->statement_liststatement,if statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,void statement_list->statement_liststatement,{ statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->statement_liststatement,; } = I152
Goto(I179,assignment_expression_list) = Closure( [7145, 7151, 7152, 7153, 7155, 7163, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if } = I153
Goto(I179,if) = Closure( [8399, 8405, 8406, 8407, 8409, 8417, 8423, 8428, 8424, 8433, 8019, 8025, 8026, 8027, 8029, 8037, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8037, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I154
Goto(I179,compound_statement) = Closure( [6993, 6999, 7000, 7001, 7003, 7011, 7017, 7018, 7022, 7027] ) = {7011, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I155
Goto(I179,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I179,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I157
Goto(I179,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I158
Goto(I179,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I159


Goto(I181,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I181,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I181,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I181,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I181,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I181,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I181,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I181,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I181,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I181,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I181,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I181,constant_expression) = Closure( [8475, 8481, 8482, 8483, 8485, 8493, 8499, 8500, 8504, 8509, 8095, 8101, 8102, 8103, 8105, 8113, 8119, 8120, 8124, 8129] ) = {8129, 8475, 8095, 8481, 8482, 8483, 8504, 8485, 8101, 8102, 8103, 8105, 8493, 8113, 8499, 8500, 8119, 8120, 8124, 8509} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ } = I206









Goto(I190,number) = Closure( [1296, 1297, 1303, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I23
Goto(I190,or_bool_expression) = Closure( [3127, 3131, 3203, 3207, 3228] ) = {3203, 4516, 4484, 4487, 3207, 3127, 3131, 3228, 4509} ={ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_operator->||,( or_operator->||,number or_operator->||,! or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, constant_expression->or_bool_expression,; constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I24
Goto(I190,third_expression) = Closure( [4260, 4261, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I25
Goto(I190,function_expression) = Closure( [1531, 1535] ) = {1531, 1535} ={ expression->function_expression,; expression->function_expression,, } = I26
Goto(I190,primary_expression) = Closure( [4457, 4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I27
Goto(I190,single_bool_expression) = Closure( [3653, 3659, 3663, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3587, 3596, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I28
Goto(I190,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4347, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1271, 1258, 1259, 4336, 4337, 1265, 1268, 1269, 1270, 4343, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,< primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,, primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I29
Goto(I190,and_bool_expression) = Closure( [3355, 3359, 3380, 3431, 3435, 3444, 3456] ) = {3456, 3431, 4585, 3435, 4560, 4592, 4563, 3380, 3444, 3355, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_operator->&&,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& or_bool_expression->and_bool_expression,; or_bool_expression->and_bool_expression,, } = I30
Goto(I190,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4108, 4109, 4115, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4133, 4138, 4140, 4141, 4033, 4039, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I31
Goto(I190,expression) = Closure( [7497, 7501] ) = {7497, 7501} ={ assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, } = I207
Goto(I190,first_expression) = Closure( [3805, 3811, 3815, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {5124, 3881, 3887, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I33
Goto(I190,identifier) = Closure( [1683, 1687, 1220, 1221, 1227, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1231, 1232, 1233, 1683, 1238, 1687, 1240, 1239, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< function_expression->identifier(expression_list),; primary_expression->identifier,* function_expression->identifier(expression_list),, primary_expression->identifier,&& primary_expression->identifier,> primary_expression->identifier,== } = I34
Goto(I190,() = Closure( [1372, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I35
Goto(I190,constant_expression) = Closure( [1607, 1611] ) = {1611, 1607} ={ expression->constant_expression,, expression->constant_expression,; } = I36


Goto(I192,() = Closure( [8775, 8747, 8748, 8749, 8751, 8759, 8765, 8766, 8770, 8741] ) = {4100, 4102, 4103, 3615, 3105, 8741, 3627, 8747, 8748, 8749, 8751, 3633, 3634, 3637, 3639, 8759, 3644, 8765, 3646, 3647, 8766, 8770, 8775, 3181, 3190, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I208

Goto(I193,,) = Closure( [923] ) = {923, 1165} ={ declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; M_declaration_parameter_suffix->,identifier } = I12
Goto(I193,declaration_parameter_suffix) = Closure( [519, 520, 524, 495, 529, 501, 502, 503, 505, 513] ) = {513, 519, 520, 524, 495, 529, 501, 502, 503, 505} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; } = I209

Goto(I194,assignment_expression_list_suffix) = Closure( [7649] ) = {7649} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I210
Goto(I194,,) = Closure( [7573] ) = {7387, 7573, 7383} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,; } = I163

Goto(I195,number) = Closure( [1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I195,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I195,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I195,single_bool_expression) = Closure( [3653, 3659, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3596, 3608] ) = {4864, 4737, 4867, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I169
Goto(I195,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I195,and_bool_expression) = Closure( [3279, 3304, 3431, 3444, 3456] ) = {3456, 3431, 3304, 4585, 3279, 4560, 4592, 4563, 3444} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| and_operator->&&,identifier or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; and_operator->&&,number and_operator->&&,( and_operator->&&,! and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& } = I211
Goto(I195,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4033, 4039, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4115, 4118, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I173
Goto(I195,first_expression) = Closure( [3805, 3811, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3887, 5171, 3890, 3829, 3892, 3893, 3834, 3899, 3836, 5117} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier } = I175
Goto(I195,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I195,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177

Goto(I196,number) = Closure( [1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I196,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I196,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I196,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4368, 4369] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I196,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4033, 4039, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4115, 4118, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I173
Goto(I196,first_expression) = Closure( [3729, 3735, 3741, 3747, 3748, 3753, 3758, 3760, 3761, 3881, 3887, 3890, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3729, 3735, 3741, 3747, 3748, 5092, 5095, 3753, 3881, 3758, 3887, 3760, 3761, 5168, 5171, 3890, 3892, 3893, 3899, 3900, 5117} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& first_operator->+,number first_operator->+,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= first_operator->-,number first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,identifier } = I212
Goto(I196,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I196,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177



Goto(I199,number) = Closure( [1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I199,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I199,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I199,single_bool_expression) = Closure( [3653, 3659, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3507, 3520, 3532] ) = {4864, 4737, 4867, 4744, 5016, 4889, 5019, 4636, 4639, 4896, 5041, 3507, 4788, 4661, 4791, 5048, 4668, 3520, 3653, 3659, 4940, 4813, 3532, 4943, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( bool_operator->>=,number bool_operator->==,identifier bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I213
Goto(I199,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I199,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4033, 4039, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4115, 4118, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I173
Goto(I199,first_expression) = Closure( [3805, 3811, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3887, 5171, 3890, 3829, 3892, 3893, 3834, 3899, 3836, 5117} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier } = I175
Goto(I199,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I199,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177

Goto(I200,number) = Closure( [1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I200,primary_expression) = Closure( [4184, 4185, 4191, 4194, 4196, 4197, 4202, 4203, 4204, 4209, 4214, 4216, 4217] ) = {4217, 4194, 4196, 4197, 4202, 4203, 4204, 4209, 4214, 4184, 4185, 4216, 4191} ={ second_expression->second_expressionsecond_operatorprimary_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,; } = I214
Goto(I200,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I200,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177


Goto(I202,number) = Closure( [1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316] ) = {1314, 1315, 1316, 1321, 1326, 1328, 1329, 1296, 1297, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I202,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4292, 4293] ) = {4290, 4260, 4261, 4292, 4293, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,|| second_expression->third_expression,<= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I202,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4470, 4469, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I202,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4368, 4369] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I202,second_expression) = Closure( [4138, 4140, 4141, 3957, 3963, 3966, 3968, 3969, 3975, 3976, 3981, 3986, 3988, 3989, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {3968, 3969, 3975, 5320, 3976, 4108, 3981, 4109, 3986, 4115, 3988, 5269, 3989, 4118, 4120, 4121, 5276, 4126, 4127, 4128, 5345, 4133, 5352, 4138, 4140, 4141, 3957, 3963, 5244, 3966} ={ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> second_operator->/,number first_expression->first_expressionfirst_operatorsecond_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ first_expression->first_expressionfirst_operatorsecond_expression,== second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,; first_expression->first_expressionfirst_operatorsecond_expression,|| second_operator->*,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_operator->/,identifier second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,!= first_expression->first_expressionfirst_operatorsecond_expression,; second_operator->*,number first_expression->first_expressionfirst_operatorsecond_expression,+ } = I215
Goto(I202,identifier) = Closure( [1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I198
Goto(I202,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1392, 1391, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177

Goto(I203,number) = Closure( [1296, 1297, 1306, 1307, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1307, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< } = I86
Goto(I203,or_bool_expression) = Closure( [3131, 3143, 3207, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3207, 3219, 3131, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) constant_expression->or_bool_expression,, or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I87
Goto(I203,third_expression) = Closure( [4260, 4261, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4271, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,, second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I88
Goto(I203,function_expression) = Closure( [1535, 1547] ) = {1547, 1535} ={ expression->function_expression,) expression->function_expression,, } = I89
Goto(I203,primary_expression) = Closure( [4450, 4451, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4461, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,, third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I90
Goto(I203,expression_list) = Closure( [1759] ) = {1759} ={ function_expression->identifier(expression_list),; } = I216
Goto(I203,single_bool_expression) = Closure( [3653, 3663, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3587, 3596, 3599, 3608] ) = {4864, 4737, 4867, 3587, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3663, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! and_bool_expression->single_bool_expression,, bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,, single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I92
Goto(I203,!) = Closure( [4336, 4337, 4346, 4347, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1193, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1345, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 1269, 1270, 1271, 4348, 4349, 4346, 4347, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ primary_expression->number,, primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,+ third_expression->!primary_expression,, primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I93
Goto(I203,and_bool_expression) = Closure( [3359, 3371, 3380, 3435, 3444, 3447, 3456] ) = {3456, 4585, 3371, 3435, 4560, 4592, 4563, 3380, 3444, 3447, 3359} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,, and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) or_bool_expression->and_bool_expression,, } = I94
Goto(I203,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4119, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4108, 4109, 5269, 4118, 4119, 4120, 4121, 5276, 4126, 4127, 4128, 4131, 4133, 4138, 4140, 4141, 4033, 5320, 4042, 4043, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 5345, 4065, 5352, 5244} ={ second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,, second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,, first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_operator->/,( second_operator->*,number } = I95
Goto(I203,expression) = Closure( [1889] ) = {1889, 2155, 2003} ={ expression_list->expressionexpression_list_suffix,) expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) } = I96
Goto(I203,first_expression) = Closure( [3805, 3815, 3817, 3823, 3824, 3827, 3829, 3834, 3836, 3837, 3881, 3890, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {5124, 3881, 5168, 3890, 5171, 3891, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3815, 5095, 3817, 3837, 3823, 3824, 3827, 3829, 3834, 3836, 5117} ={ first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,!= first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,, first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number single_bool_expression->first_expression,, first_operator->+,! single_bool_expression->first_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== single_bool_expression->first_expression,>= single_bool_expression->first_expression,|| first_operator->+,identifier } = I97
Goto(I203,identifier) = Closure( [1687, 1699, 1220, 1221, 1230, 1231, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1699, 1220, 1221, 1252, 1253, 1230, 1231, 1232, 1233, 1238, 1687, 1240, 1239, 1243, 1245} ={ primary_expression->identifier,>= function_expression->identifier(expression_list),) primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,, primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* function_expression->identifier(expression_list),, primary_expression->identifier,&& primary_expression->identifier,> primary_expression->identifier,) primary_expression->identifier,== } = I98
Goto(I203,() = Closure( [1372, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1383, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),, primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I99
Goto(I203,constant_expression) = Closure( [1611, 1623] ) = {1611, 1623} ={ expression->constant_expression,, expression->constant_expression,) } = I100

Goto(I204,)) = Closure( [1478, 1448, 1449, 1480, 1481, 1455, 1458, 1460, 1461, 1466, 1467, 1468, 1473] ) = {1473, 1478, 1480, 1448, 1449, 1481, 1455, 1458, 1460, 1461, 1466, 1467, 1468} ={ primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->(expression),<= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& } = I217


Goto(I206,)) = Closure( [8167, 8513, 8133, 8519, 8520, 8521, 8542, 8523, 8139, 8140, 8141, 8143, 8531, 8151, 8537, 8538, 8157, 8158, 8162, 8547] ) = {8960, 8965, 8513, 8133, 8519, 8520, 8521, 8523, 8139, 8140, 8141, 8143, 8531, 8151, 8537, 8538, 8157, 8542, 8158, 8162, 8931, 8547, 8167, 8937, 8938, 8941, 8949, 8955, 8956} ={ M_selection_statement->,return M_selection_statement->,{ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return M_selection_statement->,void selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ M_selection_statement->,float M_selection_statement->,int M_selection_statement->,; M_selection_statement->,if M_selection_statement->,identifier M_selection_statement->,while } = I218


Goto(I208,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I208,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I208,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I208,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I208,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I208,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I208,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I208,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I208,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I208,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I208,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I208,constant_expression) = Closure( [8779, 8785, 8786, 8787, 8789, 8797, 8803, 8804, 8808, 8813] ) = {8803, 8804, 8808, 8779, 8813, 8785, 8786, 8787, 8789, 8797} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if } = I219

Goto(I209,;) = Closure( [551, 557, 558, 562, 533, 567, 539, 540, 541, 543] ) = {551, 557, 558, 562, 533, 567, 539, 540, 541, 543} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; } = I220


Goto(I211,and_operator) = Closure( [3494, 3469, 3482] ) = {4100, 4102, 4103, 3615, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4331, 4330, 1265, 1268, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3469, 3482, 3995, 4001, 4004, 3494, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I199
Goto(I211,&&) = Closure( [4623, 4598, 4630, 4601] ) = {4630, 4601, 4598, 4623} ={ and_operator->&&,( and_operator->&&,! and_operator->&&,number and_operator->&&,identifier } = I54

Goto(I212,first_operator) = Closure( [3943, 3948, 3950, 3951, 3919, 3925, 3928, 3930, 3931, 3937, 3938] ) = {1283, 4100, 4102, 4103, 1288, 1290, 1291, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 4419, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 4430, 1359, 3919, 4431, 4432, 1364, 4437, 1366, 1367, 3925, 3928, 4442, 3930, 4444, 4445, 3931, 3937, 3938, 3943, 3948, 3950, 3951, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 4254, 4255, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4310, 4311, 4316, 4317, 4318, 4323, 4070, 4071, 4328, 1258, 4330, 4331, 1259, 4077, 4080, 1265, 4082, 4083, 1268, 1270, 1271, 4088, 4089, 4090, 1276, 1277, 1278, 4095} ={ primary_expression->number,== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* primary_expression->(expression),== first_expression->first_expressionfirst_operatorsecond_expression,!= third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= first_expression->first_expressionfirst_operatorsecond_expression,; first_expression->first_expressionfirst_operatorsecond_expression,+ third_expression->primary_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,- third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= third_expression->!primary_expression,>= primary_expression->number,/ third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->number,; second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->number,+ primary_expression->number,- primary_expression->number,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->number,* primary_expression->number,> primary_expression->number,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I202
Goto(I212,+) = Closure( [5162, 5130, 5133, 5155] ) = {5155, 5162, 5130, 5133} ={ first_operator->+,identifier first_operator->+,( first_operator->+,number first_operator->+,! } = I59
Goto(I212,-) = Closure( [5231, 5238, 5206, 5209] ) = {5209, 5206, 5238, 5231} ={ first_operator->-,! first_operator->-,number first_operator->-,( first_operator->-,identifier } = I60

Goto(I213,<) = Closure( [4674, 4677, 4699, 4706] ) = {4674, 4699, 4677, 4706} ={ bool_operator-><,number bool_operator-><,identifier bool_operator-><,! bool_operator-><,( } = I44
Goto(I213,>) = Closure( [4775, 4782, 4750, 4753] ) = {4753, 4750, 4782, 4775} ={ bool_operator->>,! bool_operator->>,number bool_operator->>,( bool_operator->>,identifier } = I45
Goto(I213,<=) = Closure( [4978, 4981, 5003, 5010] ) = {4978, 5003, 4981, 5010} ={ bool_operator-><=,number bool_operator-><=,identifier bool_operator-><=,! bool_operator-><=,( } = I46
Goto(I213,!=) = Closure( [4826, 4829, 4851, 4858] ) = {4826, 4851, 4829, 4858} ={ bool_operator->!=,number bool_operator->!=,identifier bool_operator->!=,! bool_operator->!=,( } = I47
Goto(I213,bool_operator) = Closure( [3691, 3697, 3703, 3709, 3710, 3715, 3720, 3722, 3723] ) = {4100, 4102, 4103, 3691, 3697, 3703, 3709, 4222, 4223, 3710, 3715, 4229, 4232, 3720, 4234, 4235, 3722, 3723, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4254, 4255, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1207, 1212, 1214, 1215, 4298, 4299, 4305, 4308, 4310, 4311, 4316, 4317, 4318, 4323, 4328, 1258, 1259, 4330, 4331, 1265, 1268, 1270, 1271, 1276, 1277, 1278, 3843, 1283, 1288, 3849, 1290, 1291, 3852, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 1346, 4419, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 4430, 4431, 4432, 1359, 1364, 4437, 1366, 1367, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 4070, 4071, 4077, 4080, 4082, 4083, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> second_expression->third_expression,/ second_expression->third_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== second_expression->third_expression,; second_expression->third_expression,+ single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= second_expression->third_expression,- second_expression->third_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,|| second_expression->third_expression,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= third_expression->!primary_expression,/ third_expression->!primary_expression,!= third_expression->!primary_expression,; third_expression->!primary_expression,+ third_expression->!primary_expression,- third_expression->!primary_expression,< third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- third_expression->primary_expression,; primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& primary_expression->(expression),== primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I196
Goto(I213,==) = Closure( [4902, 4905, 4927, 4934] ) = {4905, 4934, 4902, 4927} ={ bool_operator->==,! bool_operator->==,( bool_operator->==,number bool_operator->==,identifier } = I49
Goto(I213,>=) = Closure( [5054, 5057, 5079, 5086] ) = {5057, 5086, 5054, 5079} ={ bool_operator->>=,! bool_operator->>=,( bool_operator->>=,number bool_operator->>=,identifier } = I50


Goto(I215,second_operator) = Closure( [4146, 4147, 4153, 4156, 4158, 4159, 4164, 4165, 4166, 4171, 4176, 4178, 4179] ) = {1283, 1288, 1290, 1291, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 4146, 4147, 1202, 1334, 1335, 1207, 4153, 4156, 1341, 4158, 4159, 1344, 1212, 1346, 1347, 4164, 4165, 4166, 1214, 1352, 1353, 1354, 4171, 1359, 4176, 4178, 4179, 1364, 1366, 1367, 1215, 1258, 1259, 1265, 1268, 1270, 1271, 1276, 1277, 1278} ={ primary_expression->number,== primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ primary_expression->(expression),; second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< primary_expression->(expression),+ primary_expression->identifier,>= primary_expression->(expression),- primary_expression->(expression),< second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& primary_expression->identifier,|| primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& second_expression->second_expressionsecond_operatorprimary_expression,== primary_expression->(expression),== second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->identifier,<= primary_expression->number,/ primary_expression->number,!= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I200
Goto(I215,*) = Closure( [5307, 5314, 5282] ) = {5282, 5314, 5307} ={ second_operator->*,number second_operator->*,( second_operator->*,identifier } = I56
Goto(I215,/) = Closure( [5358, 5383, 5390] ) = {5390, 5358, 5383} ={ second_operator->/,( second_operator->/,number second_operator->/,identifier } = I57

Goto(I216,)) = Closure( [1797] ) = {1797} ={ function_expression->identifier(expression_list),; } = I221


Goto(I218,M_selection_statement) = Closure( [8551, 8171, 8557, 8558, 8559, 8561, 8177, 8178, 8179, 8181, 8569, 8189, 8575, 8576, 8195, 8580, 8196, 8200, 8585, 8205] ) = {6657, 6658, 6659, 8195, 6661, 8196, 8200, 6669, 6670, 8205, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7734, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6746, 6751, 6752, 6756, 6761, 6803, 6809, 6810, 6811, 6813, 6821, 6822, 8361, 6827, 6828, 8367, 8368, 7345, 8369, 8371, 6832, 6837, 7867, 8380, 8379, 7873, 7874, 7875, 8385, 7877, 8386, 8390, 6347, 8395, 7885, 7886, 6353, 6354, 6355, 7891, 6357, 7892, 7383, 7896, 7387, 6365, 6366, 6879, 7901, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6898, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6963, 7989, 6965, 7991, 2875, 6973, 6974, 7999, 8000, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 8551, 8557, 8558, 8559, 8561, 7031, 8569, 7037, 381, 7038, 7039, 7041, 8575, 387, 388, 389, 8576, 2951, 391, 7049, 7050, 8580, 8585, 399, 400, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 8646, 7113, 7114, 7115, 8651, 7117, 8652, 8656, 3027, 7125, 7126, 8661, 7131, 7132, 7136, 7141, 8171, 8177, 8178, 8179, 8181, 6651, 8189} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier statement->expression_statement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->expression_statement,if statement->expression_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->selection_statement,return statement->selection_statement,{ jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,identifier jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return compound_statement->{statement_list},void selection_statement->if(constant_expression)M_selection_statementstatement,{ jump_statement->return;,if jump_statement->return;,else compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} jump_statement->return;,identifier compound_statement->{statement_list},; jump_statement->return;,while assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if compound_statement->{statement_list},else statement->iteration_statement,void jump_statement->return;,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} statement->compound_statement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->declaration,void selection_statement->if(constant_expression)M_selection_statementstatement,if statement->declaration,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,int statement->declaration,} statement->declaration,; selection_statement->if(constant_expression)M_selection_statementstatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(constant_expression)M_selection_statementstatement,while type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->declaration,if statement->declaration,else selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier expression_statement->assignment_expression_list;,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; statement->expression_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if } = I222

Goto(I219,)) = Closure( [8841, 8842, 8846, 8817, 8851, 8823, 8824, 8825, 8827, 8835] ) = {8960, 8835, 8965, 8841, 8842, 8846, 8851, 8931, 8937, 8938, 8941, 8827, 8817, 8949, 8823, 8824, 8825, 8955, 8956} ={ M_selection_statement->,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if M_selection_statement->,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ M_selection_statement->,void M_selection_statement->,float M_selection_statement->,int M_selection_statement->,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void M_selection_statement->,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} M_selection_statement->,identifier M_selection_statement->,while } = I223



Goto(I222,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6784, 6789, 6790, 6794, 6799] ) = {6784, 6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I224
Goto(I222,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I222,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I225
Goto(I222,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,else statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I226
Goto(I222,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7772, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7913, 7915, 7923, 7924, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 7772, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7913, 7915, 1265, 7923, 1268, 3317, 1270, 1271, 7924, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,} jump_statement->return;,; primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,else jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I227
Goto(I222,{) = Closure( [6385, 6391, 6392, 6393, 6395, 6403, 6404, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6404, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if compound_statement->{statement_list},else statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I228
Goto(I222,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I222,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while } = I229
Goto(I222,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I222,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I222,statement) = Closure( [8233, 8234, 8238, 8243, 8589, 8595, 8596, 8597, 8599, 8607, 8613, 8614, 8618, 8623, 8209, 8215, 8216, 8217, 8219, 8227] ) = {8589, 8209, 8595, 8596, 8597, 8599, 8215, 8216, 8217, 8219, 8607, 8227, 8613, 8614, 8233, 8234, 8618, 8238, 8623, 8243} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I230
Goto(I222,assignment_expression_list) = Closure( [7145, 7151, 7152, 7153, 7155, 7163, 7164, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163, 7164} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else } = I231
Goto(I222,if) = Closure( [8399, 8405, 8406, 8407, 8409, 8418, 8417, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8027, 8029, 8037, 8038, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8418, 8037, 8038, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I232
Goto(I222,compound_statement) = Closure( [6993, 6999, 7000, 7001, 7003, 7011, 7012, 7017, 7018, 7022, 7027] ) = {7011, 7012, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,else statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I233
Goto(I222,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I222,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8684, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 8684, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I234
Goto(I222,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I235
Goto(I222,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 438, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 438, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I236

Goto(I223,M_selection_statement) = Closure( [8873, 8879, 8880, 8884, 8889, 8865, 8855, 8861, 8862, 8863] ) = {6657, 6658, 6659, 6661, 6669, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6751, 6752, 6756, 6761, 6803, 8855, 6809, 6810, 6811, 6813, 8861, 8862, 8863, 8865, 6821, 8873, 8361, 6827, 6828, 8879, 8880, 7345, 6832, 8371, 8884, 6837, 8367, 8368, 8369, 8889, 8379, 7867, 8385, 8386, 7873, 7874, 7877, 8390, 7875, 8395, 6347, 7885, 6353, 6354, 7891, 7892, 6357, 6355, 7383, 7896, 7387, 6365, 7901, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6965, 6963, 7991, 7989, 2875, 6973, 7999, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 2951, 391, 7049, 399, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 7113, 7114, 8651, 8652, 7117, 7115, 8656, 3027, 7125, 8661, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; statement->selection_statement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while assignment_expression_list->,; statement->selection_statement,return selection_statement->if(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return statement->selection_statement,{ selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while jump_statement->return;,float jump_statement->return;,int jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if compound_statement->{statement_list},float compound_statement->{statement_list},int jump_statement->return;,identifier jump_statement->return;,while compound_statement->{statement_list},; compound_statement->{statement_list},} assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if jump_statement->return;,{ statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,; statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} type_specifier->int,identifier statement->compound_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->declaration,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier expression_statement->assignment_expression_list;,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I237




Goto(I227,number) = Closure( [1296, 1297, 1303, 1306, 1308, 1309, 1314, 1315, 1316, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1321, 1326, 1296, 1297, 1328, 1329, 1303, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,; primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I164
Goto(I227,or_bool_expression) = Closure( [3127, 3203, 3228] ) = {3203, 4516, 4484, 4487, 3127, 3228, 4509} ={ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I165
Goto(I227,third_expression) = Closure( [4260, 4261, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4267, 4270, 4272, 4273, 4278, 4279, 4280, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== } = I166
Goto(I227,function_expression) = Closure( [1531] ) = {1531} ={ expression->function_expression,; } = I167
Goto(I227,primary_expression) = Closure( [4450, 4451, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4457, 4460, 4462, 4463, 4468, 4469, 4470, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,; third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,== } = I168
Goto(I227,single_bool_expression) = Closure( [3653, 3659, 3665, 3671, 3672, 3677, 3682, 3684, 3685, 3583, 3596, 3608] ) = {4864, 4737, 4867, 4744, 3596, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 3659, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972, 3583} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( and_bool_expression->single_bool_expression,; } = I169
Goto(I227,!) = Closure( [4336, 4337, 4343, 4346, 4348, 4349, 4354, 4355, 4356, 4361, 4366, 4369, 4368] ) = {4354, 4355, 4356, 1283, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 1334, 1335, 1207, 1212, 1341, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1265, 1268, 4348, 1270, 4343, 4349, 4346, 1271, 1276, 1277, 1278} ={ third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->(expression),; primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,; primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- third_expression->!primary_expression,; third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I170
Goto(I227,;) = Closure( [7943, 7949, 7950, 7951, 7953, 7961, 7962, 7967, 7968, 7972, 7977] ) = {7968, 7972, 7943, 7977, 7949, 7950, 7951, 7953, 7961, 7962, 7967} ={ jump_statement->return;,while jump_statement->return;,return jump_statement->return;,void jump_statement->return;,{ jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} jump_statement->return;,; jump_statement->return;,if jump_statement->return;,else jump_statement->return;,identifier } = I238
Goto(I227,and_bool_expression) = Closure( [3355, 3380, 3431, 3444, 3456] ) = {3456, 3431, 4585, 4560, 4592, 4563, 3380, 3444, 3355} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; and_operator->&&,identifier and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& or_bool_expression->and_bool_expression,; } = I172
Goto(I227,second_expression) = Closure( [4138, 4140, 4141, 4033, 4039, 4042, 4044, 4045, 4051, 4052, 4057, 4062, 4064, 4065, 4108, 4109, 4115, 4118, 4120, 4121, 4126, 4127, 4128, 4133] ) = {4033, 4039, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4115, 4118, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= first_expression->second_expression,; second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I173
Goto(I227,expression) = Closure( [7791, 7797, 7798, 7799, 7801, 7809, 7810, 7815, 7816, 7820, 7825] ) = {7809, 7810, 7815, 7816, 7820, 7791, 7825, 7797, 7798, 7799, 7801} ={ jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,void jump_statement->returnexpression;,{ jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; } = I239
Goto(I227,first_expression) = Closure( [3805, 3811, 3817, 3823, 3824, 3829, 3834, 3837, 3836, 3881, 3887, 3890, 3892, 3893, 3899, 3900, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 3811, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3887, 5171, 3890, 3829, 3892, 3893, 3834, 3899, 3836, 5117} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= single_bool_expression->first_expression,; first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,; first_operator->-,! first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier } = I175
Goto(I227,identifier) = Closure( [1683, 1220, 1221, 1227, 1230, 1232, 1233, 1238, 1239, 1240, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1227, 1230, 1232, 1233, 1683, 1238, 1239, 1240, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< function_expression->identifier(expression_list),; primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,== } = I176
Goto(I227,() = Closure( [1372, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1379, 1382, 1384, 1385, 1390, 1391, 1392, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),; primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I177
Goto(I227,constant_expression) = Closure( [1607] ) = {1607} ={ expression->constant_expression,; } = I178

Goto(I228,statement_list) = Closure( [6566, 6441, 6442, 6571, 6447, 6448, 6452, 6457, 6429, 6433, 6537, 6543, 6544, 6545, 6547, 6423, 6555, 6430, 6431, 6561, 6562] ) = {6657, 6658, 6659, 6661, 6669, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6751, 6752, 6756, 6761, 6803, 6809, 6810, 6811, 6813, 6821, 8361, 6827, 6828, 8367, 6832, 7345, 8368, 8369, 8371, 6837, 7867, 8379, 7873, 7874, 7875, 8385, 7877, 8390, 8386, 8395, 6347, 7885, 6353, 6354, 6355, 7891, 6357, 7892, 7383, 7896, 7387, 7901, 6365, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6903, 6904, 6908, 6913, 6423, 6429, 6430, 6431, 6433, 6441, 6442, 6955, 7981, 6447, 6448, 6961, 6962, 7987, 6452, 7988, 6963, 7989, 6965, 6457, 7991, 2875, 6973, 7999, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 2951, 391, 6537, 7049, 6543, 6544, 6545, 399, 6547, 7060, 7055, 405, 7056, 406, 7065, 410, 6555, 415, 6561, 6562, 6566, 6571, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 7113, 7114, 7115, 8651, 7117, 8652, 8656, 3027, 8661, 7125, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float statement->selection_statement,return assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->selection_statement,{ jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,identifier jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} jump_statement->return;,identifier compound_statement->{statement_list},; jump_statement->return;,while assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,{ compound_statement->{statement_list},if statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ compound_statement->{statement_list},void compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},if compound_statement->{statement_list},else statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float compound_statement->{statement_list},return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} statement->compound_statement,; compound_statement->{statement_list},{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; type_specifier->int,identifier statement->compound_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement_list->statement_liststatement,void statement->declaration,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if statement_list->statement_liststatement,; statement->declaration,return statement->declaration,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier statement->declaration,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return statement_list->statement_liststatement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier expression_statement->assignment_expression_list;,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I240


Goto(I230,else) = Closure( [8247, 8253, 8254, 8255, 8257, 8265, 8271, 8272, 8276, 8281] ) = {8257, 8969, 8265, 8975, 8976, 8271, 8272, 8979, 8276, 8281, 8987, 8993, 8994, 8998, 9003, 8247, 8253, 8254, 8255} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; N_selection_statement->,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if N_selection_statement->,float N_selection_statement->,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while N_selection_statement->,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ N_selection_statement->,if N_selection_statement->,identifier N_selection_statement->,while N_selection_statement->,return N_selection_statement->,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} } = I241

Goto(I231,;) = Closure( [7207, 7208, 7212, 7183, 7217, 7189, 7190, 7191, 7193, 7201, 7202] ) = {7201, 7202, 7207, 7208, 7212, 7183, 7217, 7189, 7190, 7191, 7193} ={ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; } = I242

Goto(I232,() = Closure( [8437, 8057, 8443, 8444, 8445, 8063, 8447, 8064, 8065, 8067, 8455, 8456, 8075, 8076, 8461, 8462, 8081, 8466, 8082, 8086, 8471, 8091] ) = {4100, 4102, 4103, 3615, 3105, 3627, 3633, 3634, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 8437, 1270, 1271, 8443, 1276, 1277, 1278, 8444, 8445, 1281, 8447, 3843, 1283, 3333, 8455, 1288, 8456, 1290, 1291, 3852, 8461, 3854, 3855, 3342, 8462, 8466, 3861, 3862, 8471, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 8057, 8063, 8064, 8065, 8067, 8075, 8076, 8081, 8082, 8086, 3995, 8091, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ selection_statement->if(constant_expression)M_selection_statementstatement,void primary_expression->number,- primary_expression->number,< selection_statement->if(constant_expression)M_selection_statementstatement,float primary_expression->number,* primary_expression->number,> primary_expression->number,&& selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} primary_expression->number,) selection_statement->if(constant_expression)M_selection_statementstatement,; first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) selection_statement->if(constant_expression)M_selection_statementstatement,if primary_expression->number,>= selection_statement->if(constant_expression)M_selection_statementstatement,else primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ selection_statement->if(constant_expression)M_selection_statementstatement,identifier first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& selection_statement->if(constant_expression)M_selection_statementstatement,{ first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return first_expression->second_expression,!= selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I243


Goto(I234,N_iteration_statement) = Closure( [8710, 8711, 8713, 8721, 8722, 8727, 8728, 8732, 8703, 8737, 8709] ) = {8737, 8709, 8710, 8711, 8713, 8721, 8722, 8727, 8728, 8732, 8703} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void } = I244


Goto(I236,declaration_parameter) = Closure( [486, 457, 491, 464, 465, 463, 467, 475, 476, 481, 482] ) = {481, 482, 486, 457, 491, 463, 464, 465, 1075, 467, 885, 475, 476} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I245
Goto(I236,identifier) = Closure( [619, 623] ) = {1117, 1113, 619, 1133, 623} ={ M_declaration_parameter->,, M_declaration_parameter->,; declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; M_declaration_parameter->,= declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, } = I22

Goto(I237,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6789, 6790, 6794, 6799] ) = {6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I144
Goto(I237,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I237,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I147
Goto(I237,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I148
Goto(I237,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7915, 7913, 7923, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7915, 7913, 1265, 7923, 1268, 3317, 1270, 1271, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,; jump_statement->return;,} primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I149
Goto(I237,{) = Closure( [6385, 6391, 6392, 6395, 6393, 6403, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I150
Goto(I237,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I237,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while } = I151
Goto(I237,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I237,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I237,statement) = Closure( [8893, 8899, 8900, 8901, 8903, 8911, 8917, 8918, 8922, 8927] ) = {8899, 8900, 8901, 8903, 8911, 8917, 8918, 8922, 8893, 8927} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ } = I246
Goto(I237,assignment_expression_list) = Closure( [7145, 7151, 7152, 7155, 7153, 7163, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if } = I153
Goto(I237,if) = Closure( [8399, 8409, 8405, 8406, 8407, 8417, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8029, 8027, 8037, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8037, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I154
Goto(I237,compound_statement) = Closure( [6993, 6999, 7000, 7003, 7001, 7011, 7017, 7018, 7022, 7027] ) = {7011, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I155
Goto(I237,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I237,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I157
Goto(I237,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I158
Goto(I237,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I159


Goto(I239,;) = Closure( [7847, 7848, 7853, 7854, 7858, 7829, 7863, 7835, 7836, 7837, 7839] ) = {7847, 7848, 7853, 7854, 7858, 7829, 7863, 7835, 7836, 7837, 7839} ={ jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,void jump_statement->returnexpression;,{ jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; } = I247

Goto(I240,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6789, 6790, 6794, 6799] ) = {6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I144
Goto(I240,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I240,}) = Closure( [6461, 6467, 6468, 6469, 6471, 6479, 6480, 6485, 6486, 6490, 6495] ) = {6467, 6468, 6469, 6471, 6479, 6480, 6485, 6486, 6490, 6461, 6495} ={ compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} compound_statement->{statement_list},; compound_statement->{statement_list},if compound_statement->{statement_list},else compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},void compound_statement->{statement_list},{ } = I248
Goto(I240,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I147
Goto(I240,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7098, 7093, 7094, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I148
Goto(I240,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7913, 7915, 7923, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7913, 7915, 1265, 7923, 1268, 3317, 1270, 1271, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,} jump_statement->return;,; primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I149
Goto(I240,{) = Closure( [6385, 6391, 6392, 6393, 6395, 6403, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I150
Goto(I240,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I240,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while } = I151
Goto(I240,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I240,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I240,statement) = Closure( [6575, 6581, 6582, 6583, 6585, 6593, 6599, 6600, 6604, 6609] ) = {6593, 6599, 6600, 6604, 6575, 6609, 6581, 6582, 6583, 6585} ={ statement_list->statement_liststatement,if statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while statement_list->statement_liststatement,return statement_list->statement_liststatement,void statement_list->statement_liststatement,{ statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->statement_liststatement,; } = I152
Goto(I240,assignment_expression_list) = Closure( [7145, 7151, 7152, 7153, 7155, 7163, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if } = I153
Goto(I240,if) = Closure( [8399, 8405, 8406, 8407, 8409, 8417, 8423, 8428, 8424, 8433, 8019, 8025, 8026, 8027, 8029, 8037, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8037, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I154
Goto(I240,compound_statement) = Closure( [6993, 6999, 7000, 7001, 7003, 7011, 7017, 7018, 7022, 7027] ) = {7011, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I155
Goto(I240,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I240,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I157
Goto(I240,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I158
Goto(I240,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I159

Goto(I241,N_selection_statement) = Closure( [8295, 8303, 8309, 8310, 8314, 8319, 8285, 8291, 8292, 8293] ) = {6657, 6658, 6659, 6661, 6669, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 8285, 6751, 6752, 8291, 6756, 8292, 8293, 8295, 6761, 8303, 8309, 8310, 8314, 8319, 6803, 6809, 6810, 6811, 6813, 6821, 8361, 6827, 6828, 8367, 6832, 7345, 8368, 8371, 8369, 6837, 8379, 7867, 8385, 8386, 7873, 7874, 7877, 8390, 7875, 8395, 6347, 7885, 6353, 6354, 7891, 7892, 6357, 6355, 7383, 7896, 7387, 6365, 7901, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6965, 6963, 7991, 7989, 2875, 6973, 7999, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 391, 2951, 7049, 399, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 7113, 7114, 8651, 8652, 7117, 7115, 8656, 3027, 7125, 8661, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->jump_statement,identifier statement->jump_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float statement->jump_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; statement->jump_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float statement->selection_statement,return assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,} statement->selection_statement,{ selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while jump_statement->return;,float jump_statement->return;,int jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if compound_statement->{statement_list},float compound_statement->{statement_list},int jump_statement->return;,identifier jump_statement->return;,while compound_statement->{statement_list},; compound_statement->{statement_list},} assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if jump_statement->return;,{ statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,; statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} type_specifier->int,identifier statement->compound_statement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; type_specifier->float,identifier statement->declaration,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier expression_statement->assignment_expression_list;,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I249


Goto(I243,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I243,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I243,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I243,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I243,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I243,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I243,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I243,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I243,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I243,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I243,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I243,constant_expression) = Closure( [8475, 8481, 8482, 8483, 8485, 8493, 8494, 8499, 8500, 8504, 8509, 8095, 8101, 8102, 8103, 8105, 8113, 8114, 8119, 8120, 8124, 8129] ) = {8129, 8120, 8475, 8095, 8481, 8482, 8483, 8485, 8101, 8102, 8103, 8105, 8493, 8494, 8113, 8114, 8499, 8500, 8119, 8504, 8124, 8509} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ } = I250

Goto(I244,() = Closure( [8775, 8747, 8748, 8749, 8751, 8759, 8760, 8765, 8766, 8770, 8741] ) = {4100, 4102, 4103, 3615, 3105, 8741, 3627, 8747, 8748, 8749, 8751, 3633, 3634, 3637, 3639, 8759, 8760, 3644, 8765, 3646, 3647, 8766, 8770, 8775, 3181, 3190, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 4444, 4445, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I251

Goto(I245,,) = Closure( [923] ) = {923, 1165} ={ declaration_parameter_suffix->,M_declaration_parameter_suffixdeclaration_parameterdeclaration_parameter_suffix,; M_declaration_parameter_suffix->,identifier } = I12
Goto(I245,declaration_parameter_suffix) = Closure( [519, 520, 524, 495, 529, 501, 502, 503, 505, 513, 514] ) = {513, 514, 519, 520, 524, 495, 529, 501, 502, 503, 505} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; } = I252




Goto(I249,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6789, 6790, 6794, 6799] ) = {6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I144
Goto(I249,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I249,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I147
Goto(I249,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I148
Goto(I249,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7915, 7913, 7923, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7915, 7913, 1265, 7923, 1268, 3317, 1270, 1271, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,; jump_statement->return;,} primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I149
Goto(I249,{) = Closure( [6385, 6391, 6392, 6395, 6393, 6403, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I150
Goto(I249,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I249,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,while } = I151
Goto(I249,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I249,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I249,statement) = Closure( [8323, 8329, 8330, 8331, 8333, 8341, 8347, 8348, 8352, 8357] ) = {8352, 8323, 8357, 8329, 8330, 8331, 8333, 8341, 8347, 8348} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while } = I253
Goto(I249,assignment_expression_list) = Closure( [7145, 7151, 7152, 7155, 7153, 7163, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if } = I153
Goto(I249,if) = Closure( [8399, 8405, 8406, 8409, 8407, 8417, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8029, 8027, 8037, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8037, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I154
Goto(I249,compound_statement) = Closure( [6993, 6999, 7000, 7003, 7001, 7011, 7017, 7018, 7022, 7027] ) = {7011, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I155
Goto(I249,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I249,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I157
Goto(I249,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I158
Goto(I249,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I159

Goto(I250,)) = Closure( [8167, 8158, 8513, 8133, 8519, 8520, 8521, 8523, 8139, 8140, 8141, 8143, 8531, 8532, 8151, 8152, 8537, 8538, 8157, 8542, 8162, 8547] ) = {8960, 8965, 8513, 8133, 8519, 8520, 8521, 8523, 8139, 8140, 8141, 8143, 8531, 8532, 8151, 8152, 8537, 8538, 8157, 8158, 8542, 8162, 8931, 8547, 8167, 8937, 8938, 8941, 8949, 8955, 8956} ={ M_selection_statement->,return M_selection_statement->,{ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return M_selection_statement->,void selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ M_selection_statement->,float M_selection_statement->,int M_selection_statement->,; M_selection_statement->,if M_selection_statement->,identifier M_selection_statement->,while } = I254

Goto(I251,number) = Closure( [1296, 1297, 1306, 1308, 1309, 1314, 1315, 1316, 1319, 1321, 1326, 1328, 1329] ) = {1314, 1315, 1316, 1319, 1321, 1326, 1296, 1297, 1328, 1329, 1306, 1308, 1309} ={ primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) primary_expression->number,== primary_expression->number,>= primary_expression->number,/ primary_expression->number,!= primary_expression->number,|| primary_expression->number,<= primary_expression->number,+ primary_expression->number,- primary_expression->number,< } = I62
Goto(I251,or_bool_expression) = Closure( [3143, 3219, 3228] ) = {4516, 4484, 4487, 3143, 3219, 3228, 4509} ={ or_operator->||,( or_operator->||,number or_operator->||,! constant_expression->or_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| or_operator->||,identifier } = I63
Goto(I251,third_expression) = Closure( [4260, 4261, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285, 4290, 4293, 4292] ) = {4290, 4260, 4261, 4293, 4292, 4270, 4272, 4273, 4278, 4279, 4280, 4283, 4285} ={ second_expression->third_expression,>= second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,<= second_expression->third_expression,|| second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== } = I64
Goto(I251,primary_expression) = Closure( [4450, 4451, 4460, 4462, 4463, 4468, 4469, 4470, 4475, 4473, 4480, 4482, 4483] ) = {4480, 4450, 4451, 4482, 4483, 4460, 4462, 4463, 4468, 4469, 4470, 4473, 4475} ={ third_expression->primary_expression,>= third_expression->primary_expression,/ third_expression->primary_expression,!= third_expression->primary_expression,|| third_expression->primary_expression,<= third_expression->primary_expression,+ third_expression->primary_expression,- third_expression->primary_expression,< third_expression->primary_expression,* third_expression->primary_expression,> third_expression->primary_expression,&& third_expression->primary_expression,) third_expression->primary_expression,== } = I66
Goto(I251,single_bool_expression) = Closure( [3653, 3665, 3671, 3672, 3675, 3677, 3682, 3684, 3685, 3596, 3599, 3608] ) = {4864, 4737, 4867, 4744, 3596, 3599, 5016, 4889, 3608, 5019, 4636, 4639, 4896, 5041, 4788, 4661, 4791, 5048, 4668, 3653, 4940, 4813, 4943, 3665, 4820, 3671, 3672, 3675, 3677, 3682, 3684, 4965, 3685, 4712, 4715, 4972} ={ bool_operator->==,number bool_operator->>,identifier bool_operator->==,! bool_operator->>,( and_bool_expression->single_bool_expression,&& and_bool_expression->single_bool_expression,) bool_operator->>=,number bool_operator->==,identifier and_bool_expression->single_bool_expression,|| bool_operator->>=,! bool_operator-><,number bool_operator-><,! bool_operator->==,( bool_operator->>=,identifier bool_operator->!=,number bool_operator-><,identifier bool_operator->!=,! bool_operator->>=,( bool_operator-><,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= bool_operator-><=,number bool_operator->!=,identifier bool_operator-><=,! single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< bool_operator->!=,( single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| bool_operator-><=,identifier single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= bool_operator->>,number bool_operator->>,! bool_operator-><=,( } = I67
Goto(I251,!) = Closure( [4336, 4337, 4346, 4348, 4349, 4354, 4355, 4356, 4359, 4361, 4366, 4369, 4368] ) = {1281, 4354, 4355, 4356, 1283, 4359, 1288, 4361, 1290, 1291, 4366, 4368, 4369, 1182, 1183, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 1334, 1335, 1207, 1212, 1214, 1215, 1344, 1346, 1347, 1352, 1353, 1354, 1357, 1359, 1364, 1366, 1367, 1258, 1259, 4336, 4337, 1268, 4348, 1270, 1271, 4349, 4346, 1276, 1277, 1278} ={ primary_expression->number,) third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& primary_expression->number,== third_expression->!primary_expression,) primary_expression->number,>= third_expression->!primary_expression,== primary_expression->number,|| primary_expression->number,<= third_expression->!primary_expression,>= third_expression->!primary_expression,|| third_expression->!primary_expression,<= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,/ third_expression->!primary_expression,!= primary_expression->number,+ third_expression->!primary_expression,- primary_expression->number,- primary_expression->number,< third_expression->!primary_expression,< third_expression->!primary_expression,+ primary_expression->number,* primary_expression->number,> primary_expression->number,&& } = I68
Goto(I251,and_bool_expression) = Closure( [3371, 3380, 3444, 3447, 3456] ) = {3456, 4585, 3371, 4560, 4592, 4563, 3380, 3444, 3447} ={ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| and_operator->&&,identifier or_bool_expression->and_bool_expression,) and_operator->&&,number and_operator->&&,( and_operator->&&,! or_bool_expression->and_bool_expression,|| and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) } = I69
Goto(I251,second_expression) = Closure( [4138, 4140, 4141, 4033, 4042, 4044, 4045, 4051, 4052, 4055, 4057, 4062, 4064, 4065, 4108, 4109, 4118, 4120, 4121, 4126, 4127, 4128, 4131, 4133] ) = {4033, 5320, 4042, 4044, 4045, 4108, 4109, 4051, 4052, 5269, 4118, 4055, 4120, 4057, 4121, 5276, 4062, 4126, 4064, 5345, 4065, 4127, 4128, 4131, 4133, 5352, 4138, 4140, 4141, 5244} ={ first_expression->second_expression,!= second_operator->/,number first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= first_expression->second_expression,> first_expression->second_expression,&& second_operator->*,identifier second_expression->second_expressionsecond_operatorprimary_expression,+ first_expression->second_expression,) second_expression->second_expressionsecond_operatorprimary_expression,- first_expression->second_expression,== second_expression->second_expressionsecond_operatorprimary_expression,< second_operator->*,( first_expression->second_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,* first_expression->second_expression,|| second_operator->/,identifier first_expression->second_expression,<= second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== second_operator->/,( second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= second_operator->*,number } = I70
Goto(I251,first_expression) = Closure( [3805, 3817, 3823, 3824, 3827, 3829, 3834, 3837, 3836, 3881, 3890, 3892, 3893, 3899, 3900, 3903, 3905, 3910, 3912, 3913] ) = {3905, 5124, 3910, 3912, 5193, 3913, 5200, 3805, 5092, 3900, 5095, 3817, 3881, 3837, 3823, 3824, 5168, 3890, 3827, 5171, 3829, 3892, 3893, 3834, 3899, 3836, 5117, 3903} ={ first_expression->first_expressionfirst_operatorsecond_expression,== first_operator->+,( first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_operator->-,identifier first_expression->first_expressionfirst_operatorsecond_expression,<= first_operator->-,( single_bool_expression->first_expression,!= first_operator->+,number first_expression->first_expressionfirst_operatorsecond_expression,&& first_operator->+,! single_bool_expression->first_expression,< first_expression->first_expressionfirst_operatorsecond_expression,!= single_bool_expression->first_expression,<= single_bool_expression->first_expression,> single_bool_expression->first_expression,&& first_operator->-,number first_expression->first_expressionfirst_operatorsecond_expression,+ single_bool_expression->first_expression,) first_operator->-,! single_bool_expression->first_expression,== first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< single_bool_expression->first_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,> single_bool_expression->first_expression,|| first_operator->+,identifier first_expression->first_expressionfirst_operatorsecond_expression,) } = I72
Goto(I251,identifier) = Closure( [1220, 1221, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245, 1250, 1252, 1253] ) = {1250, 1220, 1221, 1252, 1253, 1230, 1232, 1233, 1238, 1239, 1240, 1243, 1245} ={ primary_expression->identifier,>= primary_expression->identifier,/ primary_expression->identifier,!= primary_expression->identifier,|| primary_expression->identifier,<= primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) primary_expression->identifier,== } = I104
Goto(I251,() = Closure( [1372, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1405, 1404] ) = {4100, 4102, 4103, 3615, 3105, 3627, 1585, 3634, 3633, 3637, 3639, 3644, 3646, 3647, 3181, 3190, 1661, 4222, 4223, 4232, 4234, 4235, 4240, 4241, 4242, 4245, 4247, 4252, 1182, 1183, 4255, 4254, 1192, 1194, 1195, 1200, 1201, 1202, 1205, 3767, 1207, 1212, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3789, 3791, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 4321, 4323, 4328, 1258, 1259, 4331, 4330, 1268, 1270, 1271, 1276, 1277, 1278, 1281, 3843, 1283, 3333, 1288, 1290, 1291, 3852, 3854, 3855, 3342, 3861, 3862, 3865, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1344, 1346, 1347, 4422, 1352, 4424, 4425, 1353, 1354, 1357, 3406, 4430, 4431, 3409, 1359, 4432, 1364, 4437, 4435, 1367, 1366, 4442, 3418, 1372, 4445, 4444, 1373, 1382, 1384, 1385, 1390, 1391, 1392, 1395, 1397, 1402, 1404, 1405, 3995, 4004, 4006, 4007, 4013, 4014, 4017, 4019, 4024, 4026, 4027, 1509, 3558, 4070, 4071, 3561, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4093, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= constant_expression->or_bool_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< expression->constant_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,) single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= or_bool_expression->or_bool_expressionor_operatorand_bool_expression,) or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| function_expression->identifier(expression_list),) second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,) second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& primary_expression->identifier,) single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,) single_bool_expression->first_expression,== third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& third_expression->!primary_expression,) third_expression->!primary_expression,== third_expression->!primary_expression,>= primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| primary_expression->number,+ primary_expression->number,- primary_expression->number,< primary_expression->number,* primary_expression->number,> primary_expression->number,&& primary_expression->number,) first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== or_bool_expression->and_bool_expression,) primary_expression->number,>= primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,) first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,) primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== third_expression->primary_expression,) primary_expression->(expression),<= primary_expression->(expression),|| third_expression->primary_expression,>= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| primary_expression->(expression),/ third_expression->primary_expression,<= third_expression->primary_expression,|| primary_expression->(expression),!= primary_expression->(expression),+ primary_expression->(expression),- primary_expression->(expression),< primary_expression->(expression),* primary_expression->(expression),> primary_expression->(expression),&& primary_expression->(expression),) primary_expression->(expression),== primary_expression->(expression),>= primary_expression->(expression),|| primary_expression->(expression),<= first_expression->second_expression,!= first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,) first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,) and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= and_bool_expression->single_bool_expression,) second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,) second_expression->second_expressionsecond_operatorprimary_expression,== } = I74
Goto(I251,constant_expression) = Closure( [8779, 8785, 8786, 8787, 8789, 8797, 8798, 8803, 8804, 8808, 8813] ) = {8803, 8804, 8808, 8779, 8813, 8785, 8786, 8787, 8789, 8797, 8798} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else } = I255

Goto(I252,;) = Closure( [551, 552, 557, 558, 562, 533, 567, 539, 540, 541, 543] ) = {551, 552, 557, 558, 562, 533, 567, 539, 540, 541, 543} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; } = I256


Goto(I254,M_selection_statement) = Closure( [8551, 8171, 8557, 8558, 8559, 8561, 8177, 8178, 8179, 8181, 8569, 8570, 8189, 8190, 8575, 8576, 8195, 8196, 8580, 8200, 8585, 8205] ) = {6657, 6658, 6659, 8195, 6661, 8196, 8200, 6669, 6670, 8205, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7734, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6746, 6751, 6752, 6756, 6761, 6803, 6809, 6810, 6811, 6813, 6821, 6822, 8361, 6827, 6828, 8367, 8368, 7345, 8369, 8371, 6832, 6837, 7867, 8380, 8379, 7873, 7874, 7875, 8385, 7877, 8386, 8390, 6347, 8395, 7885, 7886, 6353, 6354, 6355, 7891, 6357, 7892, 7383, 7896, 7387, 6365, 6366, 6879, 7901, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6898, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6963, 7989, 6965, 7991, 2875, 6973, 6974, 7999, 8000, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 8551, 8557, 8558, 8559, 8561, 7031, 8569, 8570, 7037, 381, 7038, 7039, 7041, 8575, 387, 388, 389, 8576, 2951, 391, 7049, 7050, 8580, 8585, 399, 400, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 8646, 7113, 7114, 7115, 8651, 7117, 8652, 8656, 3027, 7125, 7126, 8661, 7131, 7132, 7136, 7141, 8171, 8177, 8178, 8179, 8181, 6651, 8189, 8190} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier statement->expression_statement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->expression_statement,if statement->expression_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->selection_statement,return statement->selection_statement,{ jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,if jump_statement->return;,float jump_statement->return;,int jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,identifier jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return compound_statement->{statement_list},void selection_statement->if(constant_expression)M_selection_statementstatement,{ jump_statement->return;,if jump_statement->return;,else compound_statement->{statement_list},float compound_statement->{statement_list},int compound_statement->{statement_list},} jump_statement->return;,identifier compound_statement->{statement_list},; jump_statement->return;,while assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if compound_statement->{statement_list},else statement->iteration_statement,void jump_statement->return;,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} statement->compound_statement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; statement->declaration,void selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else statement->declaration,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,int statement->declaration,} statement->declaration,; selection_statement->if(constant_expression)M_selection_statementstatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(constant_expression)M_selection_statementstatement,while type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->declaration,if statement->declaration,else selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier expression_statement->assignment_expression_list;,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; statement->expression_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else } = I257

Goto(I255,)) = Closure( [8841, 8842, 8846, 8817, 8851, 8823, 8824, 8825, 8827, 8835, 8836] ) = {8960, 8835, 8836, 8965, 8841, 8842, 8846, 8851, 8931, 8937, 8938, 8941, 8827, 8817, 8949, 8823, 8824, 8825, 8955, 8956} ={ M_selection_statement->,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else M_selection_statement->,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ M_selection_statement->,void M_selection_statement->,float M_selection_statement->,int M_selection_statement->,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void M_selection_statement->,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} M_selection_statement->,identifier M_selection_statement->,while } = I258


Goto(I257,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6784, 6789, 6790, 6794, 6799] ) = {6784, 6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I224
Goto(I257,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I257,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I225
Goto(I257,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,else statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I226
Goto(I257,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7772, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7913, 7915, 7923, 7924, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 7772, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7913, 7915, 1265, 7923, 1268, 3317, 1270, 1271, 7924, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,} jump_statement->return;,; primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,else jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I227
Goto(I257,{) = Closure( [6385, 6391, 6392, 6393, 6395, 6403, 6404, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6404, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if compound_statement->{statement_list},else statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I228
Goto(I257,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I257,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while } = I229
Goto(I257,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I257,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I257,statement) = Closure( [8233, 8234, 8238, 8243, 8589, 8595, 8596, 8597, 8599, 8607, 8608, 8613, 8614, 8618, 8623, 8209, 8215, 8216, 8217, 8219, 8227, 8228] ) = {8589, 8209, 8595, 8596, 8597, 8599, 8215, 8216, 8217, 8219, 8607, 8608, 8227, 8228, 8613, 8614, 8233, 8234, 8618, 8238, 8623, 8243} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I259
Goto(I257,assignment_expression_list) = Closure( [7145, 7151, 7152, 7153, 7155, 7163, 7164, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163, 7164} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else } = I231
Goto(I257,if) = Closure( [8399, 8405, 8406, 8407, 8409, 8418, 8417, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8027, 8029, 8037, 8038, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8418, 8037, 8038, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I232
Goto(I257,compound_statement) = Closure( [6993, 6999, 7000, 7001, 7003, 7011, 7012, 7017, 7018, 7022, 7027] ) = {7011, 7012, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,else statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I233
Goto(I257,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I257,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8684, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 8684, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I234
Goto(I257,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I235
Goto(I257,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 438, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 438, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I236

Goto(I258,M_selection_statement) = Closure( [8873, 8874, 8879, 8880, 8884, 8889, 8865, 8855, 8861, 8862, 8863] ) = {6657, 6658, 6659, 6661, 6669, 6670, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7734, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6746, 6751, 6752, 6756, 6761, 6803, 8855, 6809, 6810, 6811, 6813, 8861, 8862, 8863, 8865, 6821, 6822, 8873, 8874, 6827, 6828, 8361, 8879, 8880, 7345, 6832, 8371, 8884, 6837, 8367, 8368, 8369, 8889, 8379, 8380, 7867, 8385, 8386, 7873, 7874, 7877, 8390, 7875, 8395, 6347, 7885, 7886, 6353, 6354, 7891, 7892, 6357, 6355, 7383, 7896, 7387, 6365, 6366, 7901, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6898, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6965, 6963, 7991, 7989, 2875, 6973, 6974, 7999, 8000, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 2951, 391, 7049, 7050, 399, 400, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 8646, 7113, 7114, 8651, 8652, 7117, 7115, 8656, 3027, 7125, 7126, 8661, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,{ statement->selection_statement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; statement->selection_statement,if statement->selection_statement,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while assignment_expression_list->,; statement->selection_statement,return selection_statement->if(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return statement->selection_statement,{ selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while jump_statement->return;,float jump_statement->return;,int jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if jump_statement->return;,else compound_statement->{statement_list},float compound_statement->{statement_list},int jump_statement->return;,identifier jump_statement->return;,while compound_statement->{statement_list},; compound_statement->{statement_list},} assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if compound_statement->{statement_list},else jump_statement->return;,{ statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,; statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} type_specifier->float,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; statement->declaration,if statement->declaration,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I260

Goto(I259,else) = Closure( [8247, 8253, 8254, 8255, 8257, 8265, 8266, 8271, 8272, 8276, 8281] ) = {8257, 8969, 8265, 8266, 8975, 8976, 8271, 8272, 8979, 8276, 8281, 8987, 8993, 8994, 8998, 9003, 8247, 8253, 8254, 8255} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; N_selection_statement->,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else N_selection_statement->,float N_selection_statement->,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while N_selection_statement->,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ N_selection_statement->,if N_selection_statement->,identifier N_selection_statement->,while N_selection_statement->,return N_selection_statement->,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} } = I261

Goto(I260,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6784, 6789, 6790, 6794, 6799] ) = {6784, 6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I224
Goto(I260,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I260,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I225
Goto(I260,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,else statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I226
Goto(I260,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7772, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7915, 7913, 7923, 7924, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 7772, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7915, 7913, 1265, 7923, 1268, 3317, 1270, 1271, 7924, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,; jump_statement->return;,} primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,else jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I227
Goto(I260,{) = Closure( [6385, 6391, 6392, 6395, 6393, 6403, 6404, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6404, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if compound_statement->{statement_list},else statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I228
Goto(I260,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I260,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while } = I229
Goto(I260,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I260,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I260,statement) = Closure( [8893, 8899, 8900, 8901, 8903, 8911, 8912, 8917, 8918, 8922, 8927] ) = {8899, 8900, 8901, 8903, 8911, 8912, 8917, 8918, 8922, 8893, 8927} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ } = I262
Goto(I260,assignment_expression_list) = Closure( [7145, 7151, 7152, 7155, 7153, 7163, 7164, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163, 7164} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else } = I231
Goto(I260,if) = Closure( [8399, 8409, 8405, 8406, 8407, 8417, 8418, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8029, 8027, 8037, 8038, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8418, 8037, 8038, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I232
Goto(I260,compound_statement) = Closure( [6993, 6999, 7000, 7003, 7001, 7011, 7012, 7017, 7018, 7022, 7027] ) = {7011, 7012, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,else statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I233
Goto(I260,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I260,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8684, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 8684, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I234
Goto(I260,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I235
Goto(I260,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 438, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 438, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I236

Goto(I261,N_selection_statement) = Closure( [8295, 8303, 8304, 8309, 8310, 8314, 8319, 8285, 8291, 8292, 8293] ) = {6657, 6658, 6659, 6661, 6669, 6670, 6675, 6676, 6680, 6685, 7715, 7721, 7722, 7723, 7725, 7733, 7734, 7739, 7740, 7231, 7744, 7749, 6727, 6733, 6734, 6735, 6737, 6745, 6746, 8285, 6751, 6752, 8291, 6756, 8292, 8293, 8295, 6761, 8303, 8304, 8309, 8310, 8314, 8319, 6803, 6809, 6810, 6811, 6813, 6821, 6822, 8361, 6827, 6828, 8367, 6832, 7345, 8368, 8371, 8369, 6837, 8379, 8380, 7867, 8385, 8386, 7873, 7874, 7877, 8390, 7875, 8395, 6347, 7885, 7886, 6353, 6354, 7891, 7892, 6357, 6355, 7383, 7896, 7387, 6365, 6366, 7901, 6879, 6371, 6372, 6885, 6886, 6887, 6376, 6889, 6381, 6897, 6898, 6903, 6904, 6908, 6913, 6955, 7981, 6961, 6962, 7987, 7988, 6965, 6963, 7991, 7989, 2875, 6973, 6974, 7999, 8000, 6979, 6980, 8005, 8006, 6984, 8010, 6989, 8015, 7031, 381, 7037, 7038, 7039, 7041, 387, 388, 389, 391, 2951, 7049, 7050, 399, 400, 7055, 7056, 7060, 405, 406, 7065, 410, 415, 8627, 8633, 8634, 8635, 8637, 7107, 8645, 8646, 7113, 7114, 8651, 8652, 7117, 7115, 8656, 3027, 8661, 7125, 7126, 7131, 7132, 7136, 7141, 6651} ={ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return statement->expression_statement,{ jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; jump_statement->returnexpression;,return jump_statement->returnexpression;,{ statement->jump_statement,void statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if statement->jump_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->jump_statement,identifier statement->jump_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float statement->jump_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; statement->jump_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->selection_statement,void statement->selection_statement,float statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else selection_statement->if(constant_expression)M_selection_statementstatement,void statement->selection_statement,identifier statement->selection_statement,while selection_statement->if(constant_expression)M_selection_statementstatement,float statement->selection_statement,return assignment_expression_list->,; selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,} statement->selection_statement,{ selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else jump_statement->return;,void selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while jump_statement->return;,float jump_statement->return;,int jump_statement->return;,; selection_statement->if(constant_expression)M_selection_statementstatement,return jump_statement->return;,} selection_statement->if(constant_expression)M_selection_statementstatement,{ compound_statement->{statement_list},void jump_statement->return;,if jump_statement->return;,else compound_statement->{statement_list},float compound_statement->{statement_list},int jump_statement->return;,identifier jump_statement->return;,while compound_statement->{statement_list},; compound_statement->{statement_list},} assignment_expression->identifierassignment_operatorexpression,; jump_statement->return;,return assignment_expression->identifierassignment_operatorexpression,, compound_statement->{statement_list},if compound_statement->{statement_list},else jump_statement->return;,{ statement->iteration_statement,void compound_statement->{statement_list},identifier compound_statement->{statement_list},while statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} compound_statement->{statement_list},return statement->iteration_statement,; compound_statement->{statement_list},{ statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while statement->iteration_statement,return statement->iteration_statement,{ statement->compound_statement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void statement->compound_statement,float statement->compound_statement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int statement->compound_statement,; statement->compound_statement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} type_specifier->int,identifier statement->compound_statement,if statement->compound_statement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else statement->compound_statement,identifier statement->compound_statement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while statement->compound_statement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return statement->compound_statement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ statement->declaration,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; type_specifier->float,identifier statement->declaration,if statement->declaration,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else statement->declaration,identifier statement->declaration,while statement->declaration,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while statement->declaration,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; expression_statement->assignment_expression_list;,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return type_specifier->void,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,{ statement->expression_statement,void } = I263


Goto(I263,jump_statement) = Closure( [6765, 6771, 6772, 6773, 6775, 6783, 6784, 6789, 6790, 6794, 6799] ) = {6784, 6789, 6790, 6794, 6765, 6799, 6771, 6772, 6773, 6775, 6783} ={ statement->jump_statement,else statement->jump_statement,identifier statement->jump_statement,while statement->jump_statement,return statement->jump_statement,void statement->jump_statement,{ statement->jump_statement,float statement->jump_statement,int statement->jump_statement,} statement->jump_statement,; statement->jump_statement,if } = I224
Goto(I263,assignment_expression) = Closure( [7269] ) = {7535, 7269, 7687} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,; } = I145
Goto(I263,selection_statement) = Closure( [6841, 6847, 6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6875] ) = {6848, 6849, 6851, 6859, 6860, 6865, 6866, 6870, 6841, 6875, 6847} ={ statement->selection_statement,int statement->selection_statement,} statement->selection_statement,; statement->selection_statement,if statement->selection_statement,else statement->selection_statement,identifier statement->selection_statement,while statement->selection_statement,return statement->selection_statement,void statement->selection_statement,{ statement->selection_statement,float } = I225
Goto(I263,declaration) = Closure( [7069, 7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7103] ) = {7075, 7076, 7077, 7079, 7087, 7088, 7093, 7094, 7098, 7069, 7103} ={ statement->declaration,float statement->declaration,int statement->declaration,} statement->declaration,; statement->declaration,if statement->declaration,else statement->declaration,identifier statement->declaration,while statement->declaration,return statement->declaration,void statement->declaration,{ } = I226
Goto(I263,return) = Closure( [7753, 7759, 7760, 7761, 7763, 7771, 7772, 7777, 7778, 7782, 7787, 7905, 7911, 7912, 7915, 7913, 7923, 7924, 7929, 7930, 7934, 7939] ) = {4100, 4102, 4103, 3089, 3615, 1569, 3621, 3627, 3633, 3634, 3639, 3644, 3646, 3647, 7753, 7759, 7760, 7761, 7763, 7771, 7772, 3165, 7777, 7778, 7782, 7787, 1645, 3190, 4222, 4223, 4229, 4232, 4234, 4235, 4240, 4241, 4242, 4247, 4252, 1182, 1183, 4255, 4254, 1189, 1192, 1194, 1195, 1200, 1201, 1202, 3767, 1207, 1212, 3773, 1214, 1215, 3779, 3785, 4298, 4299, 3786, 3791, 4305, 4308, 3796, 4310, 4311, 3799, 3798, 4316, 4317, 4318, 7905, 4323, 7911, 4328, 7912, 1258, 1259, 4331, 4330, 7915, 7913, 1265, 7923, 1268, 3317, 1270, 1271, 7924, 7929, 7930, 1276, 1277, 1278, 7934, 3843, 1283, 7939, 1288, 3849, 1290, 1291, 3852, 3342, 3854, 3855, 3861, 3862, 3867, 3872, 3874, 3875, 1334, 1335, 4412, 4413, 1341, 1344, 3393, 1346, 1347, 4419, 4422, 1352, 4424, 4425, 1353, 1354, 3406, 4430, 4431, 1359, 4432, 1364, 4437, 1366, 1367, 3418, 4442, 4444, 4445, 3995, 4001, 4004, 4006, 4007, 4013, 4014, 4019, 4024, 4026, 4027, 1493, 3545, 3558, 4070, 4071, 4077, 4080, 4082, 4083, 3570, 4088, 4089, 4090, 4095} ={ second_expression->second_expressionsecond_operatorprimary_expression,>= second_expression->second_expressionsecond_operatorprimary_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,<= constant_expression->or_bool_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,!= expression->constant_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,; single_bool_expression->single_bool_expressionbool_operatorfirst_expression,< single_bool_expression->single_bool_expressionbool_operatorfirst_expression,> single_bool_expression->single_bool_expressionbool_operatorfirst_expression,&& single_bool_expression->single_bool_expressionbool_operatorfirst_expression,== single_bool_expression->single_bool_expressionbool_operatorfirst_expression,>= single_bool_expression->single_bool_expressionbool_operatorfirst_expression,|| single_bool_expression->single_bool_expressionbool_operatorfirst_expression,<= jump_statement->returnexpression;,void jump_statement->returnexpression;,float jump_statement->returnexpression;,int jump_statement->returnexpression;,} jump_statement->returnexpression;,; jump_statement->returnexpression;,if jump_statement->returnexpression;,else or_bool_expression->or_bool_expressionor_operatorand_bool_expression,; jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,return jump_statement->returnexpression;,{ function_expression->identifier(expression_list),; or_bool_expression->or_bool_expressionor_operatorand_bool_expression,|| second_expression->third_expression,/ second_expression->third_expression,!= second_expression->third_expression,; second_expression->third_expression,+ second_expression->third_expression,- second_expression->third_expression,< second_expression->third_expression,* second_expression->third_expression,> second_expression->third_expression,&& second_expression->third_expression,== second_expression->third_expression,>= primary_expression->identifier,/ primary_expression->identifier,!= second_expression->third_expression,<= second_expression->third_expression,|| primary_expression->identifier,; primary_expression->identifier,+ primary_expression->identifier,- primary_expression->identifier,< primary_expression->identifier,* primary_expression->identifier,> primary_expression->identifier,&& single_bool_expression->first_expression,!= primary_expression->identifier,== primary_expression->identifier,>= single_bool_expression->first_expression,; primary_expression->identifier,|| primary_expression->identifier,<= single_bool_expression->first_expression,< single_bool_expression->first_expression,> third_expression->!primary_expression,/ third_expression->!primary_expression,!= single_bool_expression->first_expression,&& single_bool_expression->first_expression,== third_expression->!primary_expression,; third_expression->!primary_expression,+ single_bool_expression->first_expression,>= third_expression->!primary_expression,- third_expression->!primary_expression,< single_bool_expression->first_expression,<= single_bool_expression->first_expression,|| third_expression->!primary_expression,* third_expression->!primary_expression,> third_expression->!primary_expression,&& jump_statement->return;,void third_expression->!primary_expression,== jump_statement->return;,float third_expression->!primary_expression,>= jump_statement->return;,int primary_expression->number,/ primary_expression->number,!= third_expression->!primary_expression,<= third_expression->!primary_expression,|| jump_statement->return;,; jump_statement->return;,} primary_expression->number,; jump_statement->return;,if primary_expression->number,+ or_bool_expression->and_bool_expression,; primary_expression->number,- primary_expression->number,< jump_statement->return;,else jump_statement->return;,identifier jump_statement->return;,while primary_expression->number,* primary_expression->number,> primary_expression->number,&& jump_statement->return;,return first_expression->first_expressionfirst_operatorsecond_expression,!= primary_expression->number,== jump_statement->return;,{ primary_expression->number,>= first_expression->first_expressionfirst_operatorsecond_expression,; primary_expression->number,|| primary_expression->number,<= first_expression->first_expressionfirst_operatorsecond_expression,+ or_bool_expression->and_bool_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,- first_expression->first_expressionfirst_operatorsecond_expression,< first_expression->first_expressionfirst_operatorsecond_expression,> first_expression->first_expressionfirst_operatorsecond_expression,&& first_expression->first_expressionfirst_operatorsecond_expression,== first_expression->first_expressionfirst_operatorsecond_expression,>= first_expression->first_expressionfirst_operatorsecond_expression,|| first_expression->first_expressionfirst_operatorsecond_expression,<= primary_expression->(expression),/ primary_expression->(expression),!= third_expression->primary_expression,/ third_expression->primary_expression,!= primary_expression->(expression),; primary_expression->(expression),+ and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,; primary_expression->(expression),- primary_expression->(expression),< third_expression->primary_expression,; third_expression->primary_expression,+ primary_expression->(expression),* third_expression->primary_expression,- third_expression->primary_expression,< primary_expression->(expression),> primary_expression->(expression),&& and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,&& third_expression->primary_expression,* third_expression->primary_expression,> primary_expression->(expression),== third_expression->primary_expression,&& primary_expression->(expression),>= third_expression->primary_expression,== primary_expression->(expression),|| primary_expression->(expression),<= and_bool_expression->and_bool_expressionand_operatorsingle_bool_expression,|| third_expression->primary_expression,>= third_expression->primary_expression,|| third_expression->primary_expression,<= first_expression->second_expression,!= first_expression->second_expression,; first_expression->second_expression,+ first_expression->second_expression,- first_expression->second_expression,< first_expression->second_expression,> first_expression->second_expression,&& first_expression->second_expression,== first_expression->second_expression,>= first_expression->second_expression,|| first_expression->second_expression,<= expression->function_expression,; and_bool_expression->single_bool_expression,; and_bool_expression->single_bool_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,/ second_expression->second_expressionsecond_operatorprimary_expression,!= second_expression->second_expressionsecond_operatorprimary_expression,; second_expression->second_expressionsecond_operatorprimary_expression,+ second_expression->second_expressionsecond_operatorprimary_expression,- second_expression->second_expressionsecond_operatorprimary_expression,< and_bool_expression->single_bool_expression,|| second_expression->second_expressionsecond_operatorprimary_expression,* second_expression->second_expressionsecond_operatorprimary_expression,> second_expression->second_expressionsecond_operatorprimary_expression,&& second_expression->second_expressionsecond_operatorprimary_expression,== } = I227
Goto(I263,{) = Closure( [6385, 6391, 6392, 6395, 6393, 6403, 6404, 6409, 6410, 6414, 6419] ) = {6528, 6403, 6404, 6533, 6409, 6410, 6414, 6419, 6391, 6395, 6613, 6619, 6620, 6621, 6623, 6499, 6631, 6505, 6506, 6507, 6637, 6638, 6509, 6385, 6642, 6517, 6647, 6392, 6393, 6523, 6524} ={ statement_list->statement_liststatement,return compound_statement->{statement_list},if compound_statement->{statement_list},else statement_list->statement_liststatement,{ compound_statement->{statement_list},identifier compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},{ compound_statement->{statement_list},float compound_statement->{statement_list},; statement_list->,void statement_list->,float statement_list->,int statement_list->,} statement_list->,; statement_list->statement_liststatement,void statement_list->,if statement_list->statement_liststatement,float statement_list->statement_liststatement,int statement_list->statement_liststatement,} statement_list->,identifier statement_list->,while statement_list->statement_liststatement,; compound_statement->{statement_list},void statement_list->,return statement_list->statement_liststatement,if statement_list->,{ compound_statement->{statement_list},int compound_statement->{statement_list},} statement_list->statement_liststatement,identifier statement_list->statement_liststatement,while } = I228
Goto(I263,void) = Closure( [3065] ) = {3065} ={ type_specifier->void,identifier } = I5
Goto(I263,iteration_statement) = Closure( [6917, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942, 6946, 6951] ) = {6946, 6917, 6951, 6923, 6924, 6925, 6927, 6935, 6936, 6941, 6942} ={ statement->iteration_statement,return statement->iteration_statement,void statement->iteration_statement,{ statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,} statement->iteration_statement,; statement->iteration_statement,if statement->iteration_statement,else statement->iteration_statement,identifier statement->iteration_statement,while } = I229
Goto(I263,float) = Closure( [2989] ) = {2989} ={ type_specifier->float,identifier } = I6
Goto(I263,int) = Closure( [2913] ) = {2913} ={ type_specifier->int,identifier } = I7
Goto(I263,statement) = Closure( [8323, 8329, 8330, 8331, 8333, 8341, 8342, 8347, 8348, 8352, 8357] ) = {8352, 8323, 8357, 8329, 8330, 8331, 8333, 8341, 8342, 8347, 8348} ={ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while } = I264
Goto(I263,assignment_expression_list) = Closure( [7145, 7151, 7152, 7155, 7153, 7163, 7164, 7169, 7170, 7174, 7179] ) = {7169, 7170, 7174, 7145, 7179, 7151, 7152, 7153, 7155, 7163, 7164} ={ expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,else } = I231
Goto(I263,if) = Closure( [8399, 8405, 8406, 8409, 8407, 8417, 8418, 8423, 8424, 8428, 8433, 8019, 8025, 8026, 8029, 8027, 8037, 8038, 8043, 8044, 8048, 8053] ) = {8399, 8019, 8405, 8406, 8407, 8025, 8409, 8026, 8027, 8029, 8417, 8418, 8037, 8038, 8423, 8424, 8043, 8428, 8044, 8048, 8433, 8053} ={ selection_statement->if(constant_expression)M_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,void selection_statement->if(constant_expression)M_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,float selection_statement->if(constant_expression)M_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,int selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,} selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,; selection_statement->if(constant_expression)M_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,if selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,else selection_statement->if(constant_expression)M_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,identifier selection_statement->if(constant_expression)M_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,while selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,return selection_statement->if(constant_expression)M_selection_statementstatement,{ selection_statement->if(constant_expression)M_selection_statementstatementelseN_selection_statementstatement,{ } = I232
Goto(I263,compound_statement) = Closure( [6993, 6999, 7000, 7003, 7001, 7011, 7012, 7017, 7018, 7022, 7027] ) = {7011, 7012, 7017, 7018, 7022, 6993, 7027, 6999, 7000, 7001, 7003} ={ statement->compound_statement,if statement->compound_statement,else statement->compound_statement,identifier statement->compound_statement,while statement->compound_statement,return statement->compound_statement,void statement->compound_statement,{ statement->compound_statement,float statement->compound_statement,int statement->compound_statement,} statement->compound_statement,; } = I233
Goto(I263,identifier) = Closure( [7421, 7425] ) = {7425, 2698, 2571, 2701, 2318, 2191, 2321, 2578, 2198, 2723, 2470, 2343, 2473, 2730, 2350, 2622, 2495, 2625, 2242, 2245, 2502, 2774, 2647, 2777, 2394, 2267, 2397, 2654, 2274, 2799, 2546, 2419, 2549, 2166, 2806, 2169, 2426, 7421} ={ assignment_expression->identifierassignment_operatorexpression,, assignment_operator->&=,number assignment_operator->%=,identifier assignment_operator->&=,! assignment_operator->-=,number assignment_operator->=,identifier assignment_operator->-=,! assignment_operator->%=,( assignment_operator->=,( assignment_operator->&=,identifier assignment_operator->/=,number assignment_operator->-=,identifier assignment_operator->/=,! assignment_operator->&=,( assignment_operator->-=,( assignment_operator->^=,number assignment_operator->/=,identifier assignment_operator->^=,! assignment_operator->+=,number assignment_operator->+=,! assignment_operator->/=,( assignment_operator->|=,number assignment_operator->^=,identifier assignment_operator->|=,! assignment_operator->*=,number assignment_operator->+=,identifier assignment_operator->*=,! assignment_operator->^=,( assignment_operator->+=,( assignment_operator->|=,identifier assignment_operator->%=,number assignment_operator->*=,identifier assignment_operator->%=,! assignment_operator->=,number assignment_operator->|=,( assignment_operator->=,! assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; } = I156
Goto(I263,while) = Closure( [8665, 8671, 8672, 8673, 8675, 8683, 8684, 8689, 8690, 8694, 8699] ) = {8672, 8673, 8675, 8683, 8684, 9038, 8689, 8690, 8694, 8665, 8699, 8671} ={ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,int iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,} iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,; iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,if iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,else N_iteration_statement->,( iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,identifier iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,while iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,return iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,void iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,{ iteration_statement->whileN_iteration_statement(constant_expression)M_selection_statementstatement,float } = I234
Goto(I263,expression_statement) = Closure( [6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718, 6723, 6689] ) = {6689, 6723, 6695, 6696, 6697, 6699, 6707, 6708, 6713, 6714, 6718} ={ statement->expression_statement,void statement->expression_statement,{ statement->expression_statement,float statement->expression_statement,int statement->expression_statement,} statement->expression_statement,; statement->expression_statement,if statement->expression_statement,else statement->expression_statement,identifier statement->expression_statement,while statement->expression_statement,return } = I235
Goto(I263,type_specifier) = Closure( [419, 425, 426, 427, 429, 437, 438, 443, 444, 448, 453] ) = {448, 419, 581, 453, 585, 426, 427, 425, 429, 437, 438, 443, 444} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration_parameter->identifierM_declaration_parameterdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while } = I236


